
muhtas1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c4  080046c4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080046c4  080046c4  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c4  080046c4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  200000c8  08004794  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08004794  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009220  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e20  00000000  00000000  00029311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fca  00000000  00000000  0002c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a92e  00000000  00000000  000444d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ecf  00000000  00000000  0004ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6ccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000d6d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	080044c0 	.word	0x080044c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	080044c0 	.word	0x080044c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 fea3 	bl	8001eac <HAL_Init>
  // These Funcs return void

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f951 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9eb 	bl	8000544 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f989 	bl	8000484 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f9bd 	bl	80004f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  mPrintf("Wiznet 5500 starting to initialize\r\n");
 8000176:	488e      	ldr	r0, [pc, #568]	; (80003b0 <main+0x254>)
 8000178:	f000 fb9a 	bl	80008b0 <mPrintf>

  reg_wizchip_cs_cbfunc(CsSelect, CsDeselect);
 800017c:	498d      	ldr	r1, [pc, #564]	; (80003b4 <main+0x258>)
 800017e:	488e      	ldr	r0, [pc, #568]	; (80003b8 <main+0x25c>)
 8000180:	f001 f97c 	bl	800147c <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(SpiRb, SpiWb);
 8000184:	498d      	ldr	r1, [pc, #564]	; (80003bc <main+0x260>)
 8000186:	488e      	ldr	r0, [pc, #568]	; (80003c0 <main+0x264>)
 8000188:	f001 f99c 	bl	80014c4 <reg_wizchip_spi_cbfunc>

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memSize) == -1)
 800018c:	498d      	ldr	r1, [pc, #564]	; (80003c4 <main+0x268>)
 800018e:	2001      	movs	r0, #1
 8000190:	f001 f9c4 	bl	800151c <ctlwizchip>
 8000194:	4603      	mov	r3, r0
 8000196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800019a:	d103      	bne.n	80001a4 <main+0x48>
  {
	  mPrintf("WIZCHIP Initialized fail.\r\n");
 800019c:	488a      	ldr	r0, [pc, #552]	; (80003c8 <main+0x26c>)
 800019e:	f000 fb87 	bl	80008b0 <mPrintf>
	  while (1);
 80001a2:	e7fe      	b.n	80001a2 <main+0x46>
  }

  mPrintf("Wiznet 5500 starting to initialize network settings\r\n");
 80001a4:	4889      	ldr	r0, [pc, #548]	; (80003cc <main+0x270>)
 80001a6:	f000 fb83 	bl	80008b0 <mPrintf>

  ctlnetwork(CN_SET_NETINFO, (void *)&netInfo);
 80001aa:	4989      	ldr	r1, [pc, #548]	; (80003d0 <main+0x274>)
 80001ac:	2000      	movs	r0, #0
 80001ae:	f001 fa97 	bl	80016e0 <ctlnetwork>
  ctlnetwork(CN_GET_NETINFO, (void *)&netInfo);
 80001b2:	4987      	ldr	r1, [pc, #540]	; (80003d0 <main+0x274>)
 80001b4:	2001      	movs	r0, #1
 80001b6:	f001 fa93 	bl	80016e0 <ctlnetwork>

  PRINT_NETINFO(netInfo);
 80001ba:	2364      	movs	r3, #100	; 0x64
 80001bc:	2218      	movs	r2, #24
 80001be:	4985      	ldr	r1, [pc, #532]	; (80003d4 <main+0x278>)
 80001c0:	4885      	ldr	r0, [pc, #532]	; (80003d8 <main+0x27c>)
 80001c2:	f003 fb66 	bl	8003892 <HAL_UART_Transmit>
 80001c6:	4b82      	ldr	r3, [pc, #520]	; (80003d0 <main+0x274>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	461c      	mov	r4, r3
 80001cc:	4b80      	ldr	r3, [pc, #512]	; (80003d0 <main+0x274>)
 80001ce:	785b      	ldrb	r3, [r3, #1]
 80001d0:	461d      	mov	r5, r3
 80001d2:	4b7f      	ldr	r3, [pc, #508]	; (80003d0 <main+0x274>)
 80001d4:	789b      	ldrb	r3, [r3, #2]
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b7d      	ldr	r3, [pc, #500]	; (80003d0 <main+0x274>)
 80001da:	78db      	ldrb	r3, [r3, #3]
 80001dc:	4619      	mov	r1, r3
 80001de:	4b7c      	ldr	r3, [pc, #496]	; (80003d0 <main+0x274>)
 80001e0:	791b      	ldrb	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	4b7a      	ldr	r3, [pc, #488]	; (80003d0 <main+0x274>)
 80001e6:	795b      	ldrb	r3, [r3, #5]
 80001e8:	9303      	str	r3, [sp, #12]
 80001ea:	9002      	str	r0, [sp, #8]
 80001ec:	9101      	str	r1, [sp, #4]
 80001ee:	9200      	str	r2, [sp, #0]
 80001f0:	462b      	mov	r3, r5
 80001f2:	4622      	mov	r2, r4
 80001f4:	4979      	ldr	r1, [pc, #484]	; (80003dc <main+0x280>)
 80001f6:	487a      	ldr	r0, [pc, #488]	; (80003e0 <main+0x284>)
 80001f8:	f003 fce8 	bl	8003bcc <siprintf>
 80001fc:	4878      	ldr	r0, [pc, #480]	; (80003e0 <main+0x284>)
 80001fe:	f7ff ffa5 	bl	800014c <strlen>
 8000202:	4603      	mov	r3, r0
 8000204:	b29a      	uxth	r2, r3
 8000206:	2364      	movs	r3, #100	; 0x64
 8000208:	4975      	ldr	r1, [pc, #468]	; (80003e0 <main+0x284>)
 800020a:	4873      	ldr	r0, [pc, #460]	; (80003d8 <main+0x27c>)
 800020c:	f003 fb41 	bl	8003892 <HAL_UART_Transmit>
 8000210:	4b6f      	ldr	r3, [pc, #444]	; (80003d0 <main+0x274>)
 8000212:	799b      	ldrb	r3, [r3, #6]
 8000214:	4619      	mov	r1, r3
 8000216:	4b6e      	ldr	r3, [pc, #440]	; (80003d0 <main+0x274>)
 8000218:	79db      	ldrb	r3, [r3, #7]
 800021a:	4618      	mov	r0, r3
 800021c:	4b6c      	ldr	r3, [pc, #432]	; (80003d0 <main+0x274>)
 800021e:	7a1b      	ldrb	r3, [r3, #8]
 8000220:	461a      	mov	r2, r3
 8000222:	4b6b      	ldr	r3, [pc, #428]	; (80003d0 <main+0x274>)
 8000224:	7a5b      	ldrb	r3, [r3, #9]
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	9200      	str	r2, [sp, #0]
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	496d      	ldr	r1, [pc, #436]	; (80003e4 <main+0x288>)
 8000230:	486b      	ldr	r0, [pc, #428]	; (80003e0 <main+0x284>)
 8000232:	f003 fccb 	bl	8003bcc <siprintf>
 8000236:	486a      	ldr	r0, [pc, #424]	; (80003e0 <main+0x284>)
 8000238:	f7ff ff88 	bl	800014c <strlen>
 800023c:	4603      	mov	r3, r0
 800023e:	b29a      	uxth	r2, r3
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	4967      	ldr	r1, [pc, #412]	; (80003e0 <main+0x284>)
 8000244:	4864      	ldr	r0, [pc, #400]	; (80003d8 <main+0x27c>)
 8000246:	f003 fb24 	bl	8003892 <HAL_UART_Transmit>
 800024a:	4b61      	ldr	r3, [pc, #388]	; (80003d0 <main+0x274>)
 800024c:	7a9b      	ldrb	r3, [r3, #10]
 800024e:	4619      	mov	r1, r3
 8000250:	4b5f      	ldr	r3, [pc, #380]	; (80003d0 <main+0x274>)
 8000252:	7adb      	ldrb	r3, [r3, #11]
 8000254:	4618      	mov	r0, r3
 8000256:	4b5e      	ldr	r3, [pc, #376]	; (80003d0 <main+0x274>)
 8000258:	7b1b      	ldrb	r3, [r3, #12]
 800025a:	461a      	mov	r2, r3
 800025c:	4b5c      	ldr	r3, [pc, #368]	; (80003d0 <main+0x274>)
 800025e:	7b5b      	ldrb	r3, [r3, #13]
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	9200      	str	r2, [sp, #0]
 8000264:	4603      	mov	r3, r0
 8000266:	460a      	mov	r2, r1
 8000268:	495f      	ldr	r1, [pc, #380]	; (80003e8 <main+0x28c>)
 800026a:	485d      	ldr	r0, [pc, #372]	; (80003e0 <main+0x284>)
 800026c:	f003 fcae 	bl	8003bcc <siprintf>
 8000270:	485b      	ldr	r0, [pc, #364]	; (80003e0 <main+0x284>)
 8000272:	f7ff ff6b 	bl	800014c <strlen>
 8000276:	4603      	mov	r3, r0
 8000278:	b29a      	uxth	r2, r3
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	4958      	ldr	r1, [pc, #352]	; (80003e0 <main+0x284>)
 800027e:	4856      	ldr	r0, [pc, #344]	; (80003d8 <main+0x27c>)
 8000280:	f003 fb07 	bl	8003892 <HAL_UART_Transmit>
 8000284:	4b52      	ldr	r3, [pc, #328]	; (80003d0 <main+0x274>)
 8000286:	7b9b      	ldrb	r3, [r3, #14]
 8000288:	4619      	mov	r1, r3
 800028a:	4b51      	ldr	r3, [pc, #324]	; (80003d0 <main+0x274>)
 800028c:	7bdb      	ldrb	r3, [r3, #15]
 800028e:	4618      	mov	r0, r3
 8000290:	4b4f      	ldr	r3, [pc, #316]	; (80003d0 <main+0x274>)
 8000292:	7c1b      	ldrb	r3, [r3, #16]
 8000294:	461a      	mov	r2, r3
 8000296:	4b4e      	ldr	r3, [pc, #312]	; (80003d0 <main+0x274>)
 8000298:	7c5b      	ldrb	r3, [r3, #17]
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	9200      	str	r2, [sp, #0]
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	4952      	ldr	r1, [pc, #328]	; (80003ec <main+0x290>)
 80002a4:	484e      	ldr	r0, [pc, #312]	; (80003e0 <main+0x284>)
 80002a6:	f003 fc91 	bl	8003bcc <siprintf>
 80002aa:	484d      	ldr	r0, [pc, #308]	; (80003e0 <main+0x284>)
 80002ac:	f7ff ff4e 	bl	800014c <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	494a      	ldr	r1, [pc, #296]	; (80003e0 <main+0x284>)
 80002b8:	4847      	ldr	r0, [pc, #284]	; (80003d8 <main+0x27c>)
 80002ba:	f003 faea 	bl	8003892 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (getSn_SR(SOCK_TCPS))
 80002be:	f44f 7042 	mov.w	r0, #776	; 0x308
 80002c2:	f000 fe97 	bl	8000ff4 <WIZCHIP_READ>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b1c      	cmp	r3, #28
 80002ca:	d864      	bhi.n	8000396 <main+0x23a>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <main+0x178>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	08000381 	.word	0x08000381
 80002d8:	08000397 	.word	0x08000397
 80002dc:	08000397 	.word	0x08000397
 80002e0:	08000397 	.word	0x08000397
 80002e4:	08000397 	.word	0x08000397
 80002e8:	08000397 	.word	0x08000397
 80002ec:	08000397 	.word	0x08000397
 80002f0:	08000397 	.word	0x08000397
 80002f4:	08000397 	.word	0x08000397
 80002f8:	08000397 	.word	0x08000397
 80002fc:	08000397 	.word	0x08000397
 8000300:	08000397 	.word	0x08000397
 8000304:	08000397 	.word	0x08000397
 8000308:	08000397 	.word	0x08000397
 800030c:	08000397 	.word	0x08000397
 8000310:	08000397 	.word	0x08000397
 8000314:	08000397 	.word	0x08000397
 8000318:	08000397 	.word	0x08000397
 800031c:	08000397 	.word	0x08000397
 8000320:	08000349 	.word	0x08000349
 8000324:	08000397 	.word	0x08000397
 8000328:	08000397 	.word	0x08000397
 800032c:	08000397 	.word	0x08000397
 8000330:	08000357 	.word	0x08000357
 8000334:	08000397 	.word	0x08000397
 8000338:	08000397 	.word	0x08000397
 800033c:	08000397 	.word	0x08000397
 8000340:	08000397 	.word	0x08000397
 8000344:	08000373 	.word	0x08000373
		{
			case SOCK_INIT:
//				connect(SN, serverIp, PORT);
				listen(SOCK_TCPS);
 8000348:	2000      	movs	r0, #0
 800034a:	f000 fc89 	bl	8000c60 <listen>
				mPrintf("Waiting to Connect\r\n");
 800034e:	4828      	ldr	r0, [pc, #160]	; (80003f0 <main+0x294>)
 8000350:	f000 faae 	bl	80008b0 <mPrintf>
				break;
 8000354:	e01f      	b.n	8000396 <main+0x23a>
			case SOCK_ESTABLISHED:
				// If it is established continue
				send(SN, (uint8_t *)"hello from stm32", 15);
 8000356:	220f      	movs	r2, #15
 8000358:	4926      	ldr	r1, [pc, #152]	; (80003f4 <main+0x298>)
 800035a:	2000      	movs	r0, #0
 800035c:	f000 fd50 	bl	8000e00 <send>
				mPrintf("Sending Message\r\n");
 8000360:	4825      	ldr	r0, [pc, #148]	; (80003f8 <main+0x29c>)
 8000362:	f000 faa5 	bl	80008b0 <mPrintf>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	4824      	ldr	r0, [pc, #144]	; (80003fc <main+0x2a0>)
 800036c:	f002 f8a4 	bl	80024b8 <HAL_GPIO_TogglePin>
				break;
 8000370:	e011      	b.n	8000396 <main+0x23a>
			case SOCK_CLOSE_WAIT:
				mPrintf("Socket is Closed\r\n");
 8000372:	4823      	ldr	r0, [pc, #140]	; (8000400 <main+0x2a4>)
 8000374:	f000 fa9c 	bl	80008b0 <mPrintf>
				disconnect(SN);
 8000378:	2000      	movs	r0, #0
 800037a:	f000 fccb 	bl	8000d14 <disconnect>
				break;
 800037e:	e00a      	b.n	8000396 <main+0x23a>
			case SOCK_CLOSED:
				// Recrate socket
				socket(SN, SOCK_STREAM, PORT, 0x00);
 8000380:	2300      	movs	r3, #0
 8000382:	f241 3288 	movw	r2, #5000	; 0x1388
 8000386:	2101      	movs	r1, #1
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fae5 	bl	8000958 <socket>
				mPrintf("Socket is Created\r\n");
 800038e:	481d      	ldr	r0, [pc, #116]	; (8000404 <main+0x2a8>)
 8000390:	f000 fa8e 	bl	80008b0 <mPrintf>
				break;
 8000394:	bf00      	nop
		}
		mPrintf("--------\r\n");
 8000396:	481c      	ldr	r0, [pc, #112]	; (8000408 <main+0x2ac>)
 8000398:	f000 fa8a 	bl	80008b0 <mPrintf>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800039c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a0:	4816      	ldr	r0, [pc, #88]	; (80003fc <main+0x2a0>)
 80003a2:	f002 f889 	bl	80024b8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80003a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003aa:	f001 fde1 	bl	8001f70 <HAL_Delay>
		switch (getSn_SR(SOCK_TCPS))
 80003ae:	e786      	b.n	80002be <main+0x162>
 80003b0:	080044d8 	.word	0x080044d8
 80003b4:	080008f5 	.word	0x080008f5
 80003b8:	080008dd 	.word	0x080008dd
 80003bc:	08000935 	.word	0x08000935
 80003c0:	0800090d 	.word	0x0800090d
 80003c4:	20000018 	.word	0x20000018
 80003c8:	08004500 	.word	0x08004500
 80003cc:	0800451c 	.word	0x0800451c
 80003d0:	20000000 	.word	0x20000000
 80003d4:	08004554 	.word	0x08004554
 80003d8:	20000178 	.word	0x20000178
 80003dc:	08004570 	.word	0x08004570
 80003e0:	200000e4 	.word	0x200000e4
 80003e4:	08004594 	.word	0x08004594
 80003e8:	080045b4 	.word	0x080045b4
 80003ec:	080045d4 	.word	0x080045d4
 80003f0:	080045f4 	.word	0x080045f4
 80003f4:	0800460c 	.word	0x0800460c
 80003f8:	08004620 	.word	0x08004620
 80003fc:	40011000 	.word	0x40011000
 8000400:	08004634 	.word	0x08004634
 8000404:	08004648 	.word	0x08004648
 8000408:	0800465c 	.word	0x0800465c

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0318 	add.w	r3, r7, #24
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f003 fbce 	bl	8003bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042e:	2302      	movs	r3, #2
 8000430:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000432:	2301      	movs	r3, #1
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000436:	2310      	movs	r3, #16
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800043a:	2300      	movs	r3, #0
 800043c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	4618      	mov	r0, r3
 8000444:	f002 f852 	bl	80024ec <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800044e:	f000 f8d9 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	230f      	movs	r3, #15
 8000454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fac0 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000476:	f000 f8c5 	bl	8000604 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3740      	adds	r7, #64	; 0x40
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000488:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <MX_SPI1_Init+0x64>)
 800048a:	4a18      	ldr	r2, [pc, #96]	; (80004ec <MX_SPI1_Init+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_SPI1_Init+0x64>)
 8000490:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_SPI1_Init+0x64>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_SPI1_Init+0x64>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004be:	2200      	movs	r2, #0
 80004c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004d0:	220a      	movs	r2, #10
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_SPI1_Init+0x64>)
 80004d6:	f002 fc23 	bl	8002d20 <HAL_SPI_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004e0:	f000 f890 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000120 	.word	0x20000120
 80004ec:	40013000 	.word	0x40013000

080004f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <MX_USART2_UART_Init+0x50>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <MX_USART2_UART_Init+0x4c>)
 80004fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <MX_USART2_UART_Init+0x4c>)
 8000528:	f003 f966 	bl	80037f8 <HAL_UART_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000532:	f000 f867 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000178 	.word	0x20000178
 8000540:	40004400 	.word	0x40004400

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <MX_GPIO_Init+0xb4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <MX_GPIO_Init+0xb4>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <MX_GPIO_Init+0xb4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0310 	and.w	r3, r3, #16
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <MX_GPIO_Init+0xb4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <MX_GPIO_Init+0xb4>)
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xb4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0320 	and.w	r3, r3, #32
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_GPIO_Init+0xb4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1a      	ldr	r2, [pc, #104]	; (80005f8 <MX_GPIO_Init+0xb4>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xb4>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <MX_GPIO_Init+0xb8>)
 80005a8:	f001 ff6e 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <MX_GPIO_Init+0xbc>)
 80005b2:	f001 ff69 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0xb8>)
 80005d0:	f001 fdd6 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80005d4:	2310      	movs	r3, #16
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_GPIO_Init+0xbc>)
 80005ec:	f001 fdc8 	bl	8002180 <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40011000 	.word	0x40011000
 8000600:	40010800 	.word	0x40010800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_MspInit+0x5c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x5c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_MspInit+0x60>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_MspInit+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <HAL_SPI_MspInit+0x88>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d12f      	bne.n	80006f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 800069a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_SPI_MspInit+0x8c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <HAL_SPI_MspInit+0x90>)
 80006d8:	f001 fd52 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <HAL_SPI_MspInit+0x90>)
 80006f0:	f001 fd46 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40013000 	.word	0x40013000
 8000700:	40021000 	.word	0x40021000
 8000704:	40010800 	.word	0x40010800

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <HAL_UART_MspInit+0x88>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d12f      	bne.n	8000788 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <HAL_UART_MspInit+0x8c>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <HAL_UART_MspInit+0x8c>)
 800072e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <HAL_UART_MspInit+0x8c>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_UART_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000758:	2304      	movs	r3, #4
 800075a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_UART_MspInit+0x90>)
 800076c:	f001 fd08 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000770:	2308      	movs	r3, #8
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000784:	f001 fcfc 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40004400 	.word	0x40004400
 8000794:	40021000 	.word	0x40021000
 8000798:	40010800 	.word	0x40010800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <NMI_Handler+0x4>

080007a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <MemManage_Handler+0x4>

080007ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <UsageFault_Handler+0x4>

080007ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f001 fba9 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <_sbrk+0x5c>)
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <_sbrk+0x60>)
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <_sbrk+0x64>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <_sbrk+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d207      	bcs.n	800082c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800081c:	f003 f9a4 	bl	8003b68 <__errno>
 8000820:	4603      	mov	r3, r0
 8000822:	220c      	movs	r2, #12
 8000824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082a:	e009      	b.n	8000840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <_sbrk+0x64>)
 800083c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20005000 	.word	0x20005000
 800084c:	00000400 	.word	0x00000400
 8000850:	200001bc 	.word	0x200001bc
 8000854:	200001f8 	.word	0x200001f8

08000858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088a:	f7ff ffe5 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f003 f971 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fc63 	bl	800015c <main>
  bx lr
 8000896:	4770      	bx	lr
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80008a0:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 80008a4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80008a8:	200001f8 	.word	0x200001f8

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>
	...

080008b0 <mPrintf>:

#include "mFunctions.h"


HAL_StatusTypeDef mPrintf(char* str)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fc47 	bl	800014c <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <mPrintf+0x28>)
 80008ca:	f002 ffe2 	bl	8003892 <HAL_UART_Transmit>
 80008ce:	4603      	mov	r3, r0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000178 	.word	0x20000178

080008dc <CsSelect>:

void CsSelect(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS LOW
 80008e0:	2200      	movs	r2, #0
 80008e2:	2110      	movs	r1, #16
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <CsSelect+0x14>)
 80008e6:	f001 fdcf 	bl	8002488 <HAL_GPIO_WritePin>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010800 	.word	0x40010800

080008f4 <CsDeselect>:

void CsDeselect(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // CS HIGH
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <CsDeselect+0x14>)
 80008fe:	f001 fdc3 	bl	8002488 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010800 	.word	0x40010800

0800090c <SpiRb>:

uint8_t SpiRb(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	uint8_t rbuf=0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi1, &rbuf, 1, HAL_MAX_DELAY);
 8000916:	1df9      	adds	r1, r7, #7
 8000918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091c:	2201      	movs	r2, #1
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <SpiRb+0x24>)
 8000920:	f002 fbbe 	bl	80030a0 <HAL_SPI_Receive>
	return rbuf;
 8000924:	79fb      	ldrb	r3, [r7, #7]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000120 	.word	0x20000120

08000934 <SpiWb>:

void SpiWb(uint8_t b)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &b, 1, HAL_MAX_DELAY);
 800093e:	1df9      	adds	r1, r7, #7
 8000940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000944:	2201      	movs	r2, #1
 8000946:	4803      	ldr	r0, [pc, #12]	; (8000954 <SpiWb+0x20>)
 8000948:	f002 fa6e 	bl	8002e28 <HAL_SPI_Transmit>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000120 	.word	0x20000120

08000958 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4604      	mov	r4, r0
 8000960:	4608      	mov	r0, r1
 8000962:	4611      	mov	r1, r2
 8000964:	461a      	mov	r2, r3
 8000966:	4623      	mov	r3, r4
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	4603      	mov	r3, r0
 800096c:	71bb      	strb	r3, [r7, #6]
 800096e:	460b      	mov	r3, r1
 8000970:	80bb      	strh	r3, [r7, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b08      	cmp	r3, #8
 800097a:	d902      	bls.n	8000982 <socket+0x2a>
 800097c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000980:	e0f2      	b.n	8000b68 <socket+0x210>
	switch(protocol)
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d005      	beq.n	8000994 <socket+0x3c>
 8000988:	2b00      	cmp	r3, #0
 800098a:	dd11      	ble.n	80009b0 <socket+0x58>
 800098c:	3b02      	subs	r3, #2
 800098e:	2b02      	cmp	r3, #2
 8000990:	d80e      	bhi.n	80009b0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000992:	e011      	b.n	80009b8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2204      	movs	r2, #4
 800099a:	4619      	mov	r1, r3
 800099c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80009a0:	f000 fbc2 	bl	8001128 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d105      	bne.n	80009b6 <socket+0x5e>
 80009aa:	f06f 0302 	mvn.w	r3, #2
 80009ae:	e0db      	b.n	8000b68 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80009b0:	f06f 0304 	mvn.w	r3, #4
 80009b4:	e0d8      	b.n	8000b68 <socket+0x210>
	    break;
 80009b6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <socket+0x70>
 80009c2:	f06f 0305 	mvn.w	r3, #5
 80009c6:	e0cf      	b.n	8000b68 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d025      	beq.n	8000a1a <socket+0xc2>
	{
   	switch(protocol)
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d002      	beq.n	80009da <socket+0x82>
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d008      	beq.n	80009ea <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80009d8:	e024      	b.n	8000a24 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11c      	bne.n	8000a1e <socket+0xc6>
 80009e4:	f06f 0305 	mvn.w	r3, #5
 80009e8:	e0be      	b.n	8000b68 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d006      	beq.n	8000a02 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80009f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db02      	blt.n	8000a02 <socket+0xaa>
 80009fc:	f06f 0305 	mvn.w	r3, #5
 8000a00:	e0b2      	b.n	8000b68 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00a      	beq.n	8000a22 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db06      	blt.n	8000a22 <socket+0xca>
 8000a14:	f06f 0305 	mvn.w	r3, #5
 8000a18:	e0a6      	b.n	8000b68 <socket+0x210>
   	}
   }
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <socket+0xcc>
   	      break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <socket+0xcc>
   	      break;
 8000a22:	bf00      	nop
	close(sn);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f8ac 	bl	8000b84 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	3301      	adds	r3, #1
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a3a:	f023 030f 	bic.w	r3, r3, #15
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f000 fb1e 	bl	800108c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d110      	bne.n	8000a78 <socket+0x120>
	{
	   port = sock_any_port++;
 8000a56:	4b46      	ldr	r3, [pc, #280]	; (8000b70 <socket+0x218>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	b291      	uxth	r1, r2
 8000a5e:	4a44      	ldr	r2, [pc, #272]	; (8000b70 <socket+0x218>)
 8000a60:	8011      	strh	r1, [r2, #0]
 8000a62:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <socket+0x218>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d103      	bne.n	8000a78 <socket+0x120>
 8000a70:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <socket+0x218>)
 8000a72:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000a76:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000a84:	461a      	mov	r2, r3
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4610      	mov	r0, r2
 8000a92:	f000 fafb 	bl	800108c <WIZCHIP_WRITE>
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4610      	mov	r0, r2
 8000aac:	f000 faee 	bl	800108c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 fae4 	bl	800108c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000ac4:	bf00      	nop
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	3301      	adds	r3, #1
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fa8e 	bl	8000ff4 <WIZCHIP_READ>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f3      	bne.n	8000ac6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <socket+0x21c>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	4013      	ands	r3, r2
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <socket+0x21c>)
 8000afa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	f003 0201 	and.w	r2, r3, #1
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <socket+0x21c>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <socket+0x21c>)
 8000b18:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <socket+0x220>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <socket+0x220>)
 8000b36:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <socket+0x224>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <socket+0x228>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000b4a:	bf00      	nop
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	3301      	adds	r3, #1
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fa4b 	bl	8000ff4 <WIZCHIP_READ>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f3      	beq.n	8000b4c <socket+0x1f4>
   return (int8_t)sn;
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}
 8000b70:	2000002c 	.word	0x2000002c
 8000b74:	200001c0 	.word	0x200001c0
 8000b78:	200001c2 	.word	0x200001c2
 8000b7c:	200001c4 	.word	0x200001c4
 8000b80:	200001d4 	.word	0x200001d4

08000b84 <close>:

int8_t close(uint8_t sn)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d902      	bls.n	8000b9a <close+0x16>
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b98:	e055      	b.n	8000c46 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fa6f 	bl	800108c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000bae:	bf00      	nop
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fa19 	bl	8000ff4 <WIZCHIP_READ>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f3      	bne.n	8000bb0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	3301      	adds	r3, #1
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd4:	211f      	movs	r1, #31
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fa58 	bl	800108c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2201      	movs	r2, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <close+0xcc>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <close+0xcc>)
 8000bf8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <close+0xd0>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <close+0xd0>)
 8000c16:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <close+0xd4>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <close+0xd8>)
 8000c26:	2100      	movs	r1, #0
 8000c28:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000c2a:	bf00      	nop
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	3301      	adds	r3, #1
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f9db 	bl	8000ff4 <WIZCHIP_READ>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f3      	bne.n	8000c2c <close+0xa8>
	return SOCK_OK;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001c0 	.word	0x200001c0
 8000c54:	200001c2 	.word	0x200001c2
 8000c58:	200001c4 	.word	0x200001c4
 8000c5c:	200001d4 	.word	0x200001d4

08000c60 <listen>:

int8_t listen(uint8_t sn)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d902      	bls.n	8000c76 <listen+0x16>
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c74:	e049      	b.n	8000d0a <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f9b8 	bl	8000ff4 <WIZCHIP_READ>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d002      	beq.n	8000c94 <listen+0x34>
 8000c8e:	f06f 0304 	mvn.w	r3, #4
 8000c92:	e03a      	b.n	8000d0a <listen+0xaa>
	CHECK_SOCKINIT();
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	3301      	adds	r3, #1
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f9a7 	bl	8000ff4 <WIZCHIP_READ>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b13      	cmp	r3, #19
 8000caa:	d002      	beq.n	8000cb2 <listen+0x52>
 8000cac:	f06f 0302 	mvn.w	r3, #2
 8000cb0:	e02b      	b.n	8000d0a <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cbe:	2102      	movs	r1, #2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f9e3 	bl	800108c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000cc6:	bf00      	nop
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3301      	adds	r3, #1
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f98d 	bl	8000ff4 <WIZCHIP_READ>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f3      	bne.n	8000cc8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000ce0:	e006      	b.n	8000cf0 <listen+0x90>
   {
         close(sn);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff4d 	bl	8000b84 <close>
         return SOCKERR_SOCKCLOSED;
 8000cea:	f06f 0303 	mvn.w	r3, #3
 8000cee:	e00c      	b.n	8000d0a <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f979 	bl	8000ff4 <WIZCHIP_READ>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b14      	cmp	r3, #20
 8000d06:	d1ec      	bne.n	8000ce2 <listen+0x82>
   }
   return SOCK_OK;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d902      	bls.n	8000d2a <disconnect+0x16>
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d28:	e062      	b.n	8000df0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	3301      	adds	r3, #1
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f95e 	bl	8000ff4 <WIZCHIP_READ>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d002      	beq.n	8000d48 <disconnect+0x34>
 8000d42:	f06f 0304 	mvn.w	r3, #4
 8000d46:	e053      	b.n	8000df0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d54:	2108      	movs	r1, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f998 	bl	800108c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000d5c:	bf00      	nop
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	3301      	adds	r3, #1
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f942 	bl	8000ff4 <WIZCHIP_READ>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f3      	bne.n	8000d5e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <disconnect+0xe4>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <disconnect+0xe4>)
 8000d92:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <disconnect+0xe8>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	fa42 f303 	asr.w	r3, r2, r3
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d016      	beq.n	8000dd6 <disconnect+0xc2>
 8000da8:	2300      	movs	r3, #0
 8000daa:	e021      	b.n	8000df0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	3301      	adds	r3, #1
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f91b 	bl	8000ff4 <WIZCHIP_READ>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <disconnect+0xc2>
	   {
	      close(sn);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff feda 	bl	8000b84 <close>
	      return SOCKERR_TIMEOUT;
 8000dd0:	f06f 030c 	mvn.w	r3, #12
 8000dd4:	e00c      	b.n	8000df0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	3301      	adds	r3, #1
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f906 	bl	8000ff4 <WIZCHIP_READ>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1de      	bne.n	8000dac <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001c2 	.word	0x200001c2
 8000dfc:	200001c0 	.word	0x200001c0

08000e00 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b08      	cmp	r3, #8
 8000e1c:	d902      	bls.n	8000e24 <send+0x24>
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e0de      	b.n	8000fe2 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	3301      	adds	r3, #1
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f8e1 	bl	8000ff4 <WIZCHIP_READ>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f003 030f 	and.w	r3, r3, #15
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d002      	beq.n	8000e42 <send+0x42>
 8000e3c:	f06f 0304 	mvn.w	r3, #4
 8000e40:	e0cf      	b.n	8000fe2 <send+0x1e2>
   CHECK_SOCKDATA();
 8000e42:	88bb      	ldrh	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <send+0x4e>
 8000e48:	f06f 030d 	mvn.w	r3, #13
 8000e4c:	e0c9      	b.n	8000fe2 <send+0x1e2>
   tmp = getSn_SR(sn);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	3301      	adds	r3, #1
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f8ca 	bl	8000ff4 <WIZCHIP_READ>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b17      	cmp	r3, #23
 8000e68:	d005      	beq.n	8000e76 <send+0x76>
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b1c      	cmp	r3, #28
 8000e6e:	d002      	beq.n	8000e76 <send+0x76>
 8000e70:	f06f 0306 	mvn.w	r3, #6
 8000e74:	e0b5      	b.n	8000fe2 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <send+0x1ec>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	fa42 f303 	asr.w	r3, r2, r3
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d039      	beq.n	8000efe <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	3301      	adds	r3, #1
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f8ac 	bl	8000ff4 <WIZCHIP_READ>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d019      	beq.n	8000ee2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f8e5 	bl	800108c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <send+0x1ec>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b43      	ldr	r3, [pc, #268]	; (8000fec <send+0x1ec>)
 8000ede:	801a      	strh	r2, [r3, #0]
 8000ee0:	e00d      	b.n	8000efe <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <send+0xfa>
      {
         close(sn);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe48 	bl	8000b84 <close>
         return SOCKERR_TIMEOUT;
 8000ef4:	f06f 030c 	mvn.w	r3, #12
 8000ef8:	e073      	b.n	8000fe2 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e071      	b.n	8000fe2 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	3301      	adds	r3, #1
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f872 	bl	8000ff4 <WIZCHIP_READ>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	029b      	lsls	r3, r3, #10
 8000f16:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d901      	bls.n	8000f24 <send+0x124>
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f9be 	bl	80012a8 <getSn_TX_FSR>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3301      	adds	r3, #1
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f859 	bl	8000ff4 <WIZCHIP_READ>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b17      	cmp	r3, #23
 8000f4a:	d009      	beq.n	8000f60 <send+0x160>
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b1c      	cmp	r3, #28
 8000f50:	d006      	beq.n	8000f60 <send+0x160>
      {
         close(sn);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe15 	bl	8000b84 <close>
         return SOCKERR_SOCKSTATUS;
 8000f5a:	f06f 0306 	mvn.w	r3, #6
 8000f5e:	e040      	b.n	8000fe2 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <send+0x1f0>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	fa42 f303 	asr.w	r3, r2, r3
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <send+0x180>
 8000f74:	88ba      	ldrh	r2, [r7, #4]
 8000f76:	89bb      	ldrh	r3, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d901      	bls.n	8000f80 <send+0x180>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e030      	b.n	8000fe2 <send+0x1e2>
      if(len <= freesize) break;
 8000f80:	88ba      	ldrh	r2, [r7, #4]
 8000f82:	89bb      	ldrh	r3, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d900      	bls.n	8000f8a <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000f88:	e7cc      	b.n	8000f24 <send+0x124>
      if(len <= freesize) break;
 8000f8a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000f8c:	88ba      	ldrh	r2, [r7, #4]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	6839      	ldr	r1, [r7, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f9d3 	bl	800133e <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f870 	bl	800108c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000fac:	bf00      	nop
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f81a 	bl	8000ff4 <WIZCHIP_READ>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f3      	bne.n	8000fae <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <send+0x1ec>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <send+0x1ec>)
 8000fde:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001c2 	.word	0x200001c2
 8000ff0:	200001c0 	.word	0x200001c0

08000ff4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <WIZCHIP_READ+0x94>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <WIZCHIP_READ+0x94>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <WIZCHIP_READ+0x94>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <WIZCHIP_READ+0x24>
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <WIZCHIP_READ+0x94>)
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	2b00      	cmp	r3, #0
 8001016:	d114      	bne.n	8001042 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <WIZCHIP_READ+0x94>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	0c12      	lsrs	r2, r2, #16
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <WIZCHIP_READ+0x94>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	0a12      	lsrs	r2, r2, #8
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	4610      	mov	r0, r2
 8001032:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <WIZCHIP_READ+0x94>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	4610      	mov	r0, r2
 800103e:	4798      	blx	r3
 8001040:	e011      	b.n	8001066 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0c1b      	lsrs	r3, r3, #16
 8001046:	b2db      	uxtb	r3, r3
 8001048:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b2db      	uxtb	r3, r3
 8001050:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <WIZCHIP_READ+0x94>)
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	2103      	movs	r1, #3
 8001062:	4610      	mov	r0, r2
 8001064:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <WIZCHIP_READ+0x94>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4798      	blx	r3
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <WIZCHIP_READ+0x94>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <WIZCHIP_READ+0x94>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	4798      	blx	r3
   return ret;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000030 	.word	0x20000030

0800108c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <WIZCHIP_WRITE+0x98>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d119      	bne.n	80010e8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	0c12      	lsrs	r2, r2, #16
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	4610      	mov	r0, r2
 80010c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	0a12      	lsrs	r2, r2, #8
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	4610      	mov	r0, r2
 80010ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	4610      	mov	r0, r2
 80010da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <WIZCHIP_WRITE+0x98>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	78fa      	ldrb	r2, [r7, #3]
 80010e2:	4610      	mov	r0, r2
 80010e4:	4798      	blx	r3
 80010e6:	e013      	b.n	8001110 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	0c1b      	lsrs	r3, r3, #16
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <WIZCHIP_WRITE+0x98>)
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f107 020c 	add.w	r2, r7, #12
 800110a:	2104      	movs	r1, #4
 800110c:	4610      	mov	r0, r2
 800110e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <WIZCHIP_WRITE+0x98>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <WIZCHIP_WRITE+0x98>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	4798      	blx	r3
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000030 	.word	0x20000030

08001128 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <WIZCHIP_READ_BUF+0x2a>
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	2b00      	cmp	r3, #0
 8001150:	d126      	bne.n	80011a0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	0c12      	lsrs	r2, r2, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	4610      	mov	r0, r2
 800115e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	0a12      	lsrs	r2, r2, #8
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	4610      	mov	r0, r2
 8001178:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]
 800117e:	e00a      	b.n	8001196 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	8afa      	ldrh	r2, [r7, #22]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	188c      	adds	r4, r1, r2
 800118a:	4798      	blx	r3
 800118c:	4603      	mov	r3, r0
 800118e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001190:	8afb      	ldrh	r3, [r7, #22]
 8001192:	3301      	adds	r3, #1
 8001194:	82fb      	strh	r3, [r7, #22]
 8001196:	8afa      	ldrh	r2, [r7, #22]
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3f0      	bcc.n	8001180 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800119e:	e017      	b.n	80011d0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f107 0210 	add.w	r2, r7, #16
 80011be:	2103      	movs	r1, #3
 80011c0:	4610      	mov	r0, r2
 80011c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	4611      	mov	r1, r2
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <WIZCHIP_READ_BUF+0xbc>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	4798      	blx	r3
}
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20000030 	.word	0x20000030

080011e8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4798      	blx	r3
   WIZCHIP.CS._select();
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	2b00      	cmp	r3, #0
 8001210:	d126      	bne.n	8001260 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	0c12      	lsrs	r2, r2, #16
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	4610      	mov	r0, r2
 800121e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	0a12      	lsrs	r2, r2, #8
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	4610      	mov	r0, r2
 800122c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	4610      	mov	r0, r2
 8001238:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	82fb      	strh	r3, [r7, #22]
 800123e:	e00a      	b.n	8001256 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	8afa      	ldrh	r2, [r7, #22]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	440a      	add	r2, r1
 800124a:	7812      	ldrb	r2, [r2, #0]
 800124c:	4610      	mov	r0, r2
 800124e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001250:	8afb      	ldrh	r3, [r7, #22]
 8001252:	3301      	adds	r3, #1
 8001254:	82fb      	strh	r3, [r7, #22]
 8001256:	8afa      	ldrh	r2, [r7, #22]
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	d3f0      	bcc.n	8001240 <WIZCHIP_WRITE_BUF+0x58>
 800125e:	e017      	b.n	8001290 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	0c1b      	lsrs	r3, r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f107 0210 	add.w	r2, r7, #16
 800127e:	2103      	movs	r1, #3
 8001280:	4610      	mov	r0, r2
 8001282:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	4611      	mov	r1, r2
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001296:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	4798      	blx	r3
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000030 	.word	0x20000030

080012a8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	81fb      	strh	r3, [r7, #14]
 80012b6:	2300      	movs	r3, #0
 80012b8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	3301      	adds	r3, #1
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe94 	bl	8000ff4 <WIZCHIP_READ>
 80012cc:	4603      	mov	r3, r0
 80012ce:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80012d0:	89bb      	ldrh	r3, [r7, #12]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b29c      	uxth	r4, r3
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3301      	adds	r3, #1
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe86 	bl	8000ff4 <WIZCHIP_READ>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4423      	add	r3, r4
 80012ee:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01a      	beq.n	800132c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	3301      	adds	r3, #1
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe76 	bl	8000ff4 <WIZCHIP_READ>
 8001308:	4603      	mov	r3, r0
 800130a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800130c:	89fb      	ldrh	r3, [r7, #14]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b29c      	uxth	r4, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	3301      	adds	r3, #1
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe68 	bl	8000ff4 <WIZCHIP_READ>
 8001324:	4603      	mov	r3, r0
 8001326:	b29b      	uxth	r3, r3
 8001328:	4423      	add	r3, r4
 800132a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800132c:	89fa      	ldrh	r2, [r7, #14]
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d1c2      	bne.n	80012ba <getSn_TX_FSR+0x12>
   return val;
 8001334:	89fb      	ldrh	r3, [r7, #14]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}

0800133e <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800133e:	b590      	push	{r4, r7, lr}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	6039      	str	r1, [r7, #0]
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	4613      	mov	r3, r2
 800134c:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d048      	beq.n	80013ee <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	3301      	adds	r3, #1
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe43 	bl	8000ff4 <WIZCHIP_READ>
 800136e:	4603      	mov	r3, r0
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29c      	uxth	r4, r3
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3301      	adds	r3, #1
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe36 	bl	8000ff4 <WIZCHIP_READ>
 8001388:	4603      	mov	r3, r0
 800138a:	b29b      	uxth	r3, r3
 800138c:	4423      	add	r3, r4
 800138e:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	3202      	adds	r2, #2
 800139a:	00d2      	lsls	r2, r2, #3
 800139c:	4413      	add	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f7ff ff1e 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80013ac:	89fa      	ldrh	r2, [r7, #14]
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	3301      	adds	r3, #1
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80013c0:	461a      	mov	r2, r3
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f7ff fe5d 	bl	800108c <WIZCHIP_WRITE>
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80013de:	461a      	mov	r2, r3
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff fe50 	bl	800108c <WIZCHIP_WRITE>
 80013ec:	e000      	b.n	80013f0 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80013ee:	bf00      	nop
}
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}

080013f6 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
 800145e:	2300      	movs	r3, #0
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <reg_wizchip_cs_cbfunc+0x16>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <reg_wizchip_cs_cbfunc+0x3c>)
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <reg_wizchip_cs_cbfunc+0x40>)
 8001496:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <reg_wizchip_cs_cbfunc+0x3c>)
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <reg_wizchip_cs_cbfunc+0x44>)
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	e006      	b.n	80014ae <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <reg_wizchip_cs_cbfunc+0x3c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <reg_wizchip_cs_cbfunc+0x3c>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6193      	str	r3, [r2, #24]
   }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000030 	.word	0x20000030
 80014bc:	0800140f 	.word	0x0800140f
 80014c0:	0800141b 	.word	0x0800141b

080014c4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80014ce:	bf00      	nop
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <reg_wizchip_spi_cbfunc+0x4c>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f9      	beq.n	80014d0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <reg_wizchip_spi_cbfunc+0x24>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <reg_wizchip_spi_cbfunc+0x4c>)
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <reg_wizchip_spi_cbfunc+0x50>)
 80014ec:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <reg_wizchip_spi_cbfunc+0x4c>)
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <reg_wizchip_spi_cbfunc+0x54>)
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	e006      	b.n	8001504 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <reg_wizchip_spi_cbfunc+0x4c>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <reg_wizchip_spi_cbfunc+0x4c>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6213      	str	r3, [r2, #32]
   }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000030 	.word	0x20000030
 8001514:	0800145b 	.word	0x0800145b
 8001518:	08001469 	.word	0x08001469

0800151c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f200 80c7 	bhi.w	80016ca <ctlwizchip+0x1ae>
 800153c:	a201      	add	r2, pc, #4	; (adr r2, 8001544 <ctlwizchip+0x28>)
 800153e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001542:	bf00      	nop
 8001544:	08001585 	.word	0x08001585
 8001548:	0800158b 	.word	0x0800158b
 800154c:	080015b7 	.word	0x080015b7
 8001550:	080015ab 	.word	0x080015ab
 8001554:	080015c5 	.word	0x080015c5
 8001558:	080015d1 	.word	0x080015d1
 800155c:	080015df 	.word	0x080015df
 8001560:	08001605 	.word	0x08001605
 8001564:	0800162b 	.word	0x0800162b
 8001568:	0800166f 	.word	0x0800166f
 800156c:	08001675 	.word	0x08001675
 8001570:	0800167d 	.word	0x0800167d
 8001574:	080016d1 	.word	0x080016d1
 8001578:	08001685 	.word	0x08001685
 800157c:	08001693 	.word	0x08001693
 8001580:	080016af 	.word	0x080016af
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001584:	f000 f8ea 	bl	800175c <wizchip_sw_reset>
         break;
 8001588:	e0a3      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f927 	bl	80017f4 <wizchip_init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	e094      	b.n	80016d4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f9ac 	bl	800190c <wizchip_clrinterrupt>
         break;
 80015b4:	e08d      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80015b6:	f000 f9dd 	bl	8001974 <wizchip_getinterrupt>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	801a      	strh	r2, [r3, #0]
         break;
 80015c2:	e086      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f9f8 	bl	80019be <wizchip_setinterruptmask>
         break;         
 80015ce:	e080      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80015d0:	f000 fa10 	bl	80019f4 <wizchip_getinterruptmask>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	801a      	strh	r2, [r3, #0]
         break;
 80015dc:	e079      	b.n	80016d2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80015ee:	f7ff fd4d 	bl	800108c <WIZCHIP_WRITE>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80015fe:	f7ff fd45 	bl	800108c <WIZCHIP_WRITE>
         break;
 8001602:	e066      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001604:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001608:	f7ff fcf4 	bl	8000ff4 <WIZCHIP_READ>
 800160c:	4603      	mov	r3, r0
 800160e:	b29b      	uxth	r3, r3
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b29c      	uxth	r4, r3
 8001614:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001618:	f7ff fcec 	bl	8000ff4 <WIZCHIP_READ>
 800161c:	4603      	mov	r3, r0
 800161e:	b29b      	uxth	r3, r3
 8001620:	4423      	add	r3, r4
 8001622:	b29a      	uxth	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	801a      	strh	r2, [r3, #0]
         break;
 8001628:	e053      	b.n	80016d2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <ctlwizchip+0x1c0>)
 800162c:	789a      	ldrb	r2, [r3, #2]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <ctlwizchip+0x1c0>)
 8001638:	78d2      	ldrb	r2, [r2, #3]
 800163a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3302      	adds	r3, #2
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <ctlwizchip+0x1c0>)
 8001642:	7912      	ldrb	r2, [r2, #4]
 8001644:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	3303      	adds	r3, #3
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <ctlwizchip+0x1c0>)
 800164c:	7952      	ldrb	r2, [r2, #5]
 800164e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3304      	adds	r3, #4
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <ctlwizchip+0x1c0>)
 8001656:	7992      	ldrb	r2, [r2, #6]
 8001658:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	3305      	adds	r3, #5
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <ctlwizchip+0x1c0>)
 8001660:	79d2      	ldrb	r2, [r2, #7]
 8001662:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	3306      	adds	r3, #6
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
         break;
 800166c:	e031      	b.n	80016d2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800166e:	f000 fa13 	bl	8001a98 <wizphy_reset>
         break;
 8001672:	e02e      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f000 fa36 	bl	8001ae6 <wizphy_setphyconf>
         break;
 800167a:	e02a      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f000 fa74 	bl	8001b6a <wizphy_getphyconf>
         break;
 8001682:	e026      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fad7 	bl	8001c3c <wizphy_setphypmode>
 800168e:	4603      	mov	r3, r0
 8001690:	e020      	b.n	80016d4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001692:	f000 f9e8 	bl	8001a66 <wizphy_getphypmode>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2bff      	cmp	r3, #255	; 0xff
 800169e:	d102      	bne.n	80016a6 <ctlwizchip+0x18a>
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a4:	e016      	b.n	80016d4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	7dfa      	ldrb	r2, [r7, #23]
 80016aa:	701a      	strb	r2, [r3, #0]
         break;
 80016ac:	e011      	b.n	80016d2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80016ae:	f000 f9c4 	bl	8001a3a <wizphy_getphylink>
 80016b2:	4603      	mov	r3, r0
 80016b4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2bff      	cmp	r3, #255	; 0xff
 80016ba:	d102      	bne.n	80016c2 <ctlwizchip+0x1a6>
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c0:	e008      	b.n	80016d4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7dfa      	ldrb	r2, [r7, #23]
 80016c6:	701a      	strb	r2, [r3, #0]
         break;
 80016c8:	e003      	b.n	80016d2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ce:	e001      	b.n	80016d4 <ctlwizchip+0x1b8>
         break;
 80016d0:	bf00      	nop
   }
   return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	20000030 	.word	0x20000030

080016e0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d82c      	bhi.n	800174c <ctlnetwork+0x6c>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <ctlnetwork+0x18>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001711 	.word	0x08001711
 80016fc:	08001719 	.word	0x08001719
 8001700:	08001721 	.word	0x08001721
 8001704:	0800172f 	.word	0x0800172f
 8001708:	0800173d 	.word	0x0800173d
 800170c:	08001745 	.word	0x08001745
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f000 fadd 	bl	8001cd0 <wizchip_setnetinfo>
         break;
 8001716:	e01c      	b.n	8001752 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f000 fb19 	bl	8001d50 <wizchip_getnetinfo>
         break;
 800171e:	e018      	b.n	8001752 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fb53 	bl	8001dd0 <wizchip_setnetmode>
 800172a:	4603      	mov	r3, r0
 800172c:	e012      	b.n	8001754 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800172e:	f000 fb71 	bl	8001e14 <wizchip_getnetmode>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	701a      	strb	r2, [r3, #0]
         break;
 800173a:	e00a      	b.n	8001752 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f000 fb71 	bl	8001e24 <wizchip_settimeout>
         break;
 8001742:	e006      	b.n	8001752 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f000 fb8e 	bl	8001e66 <wizchip_gettimeout>
         break;
 800174a:	e002      	b.n	8001752 <ctlnetwork+0x72>
      default:
         return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001750:	e000      	b.n	8001754 <ctlnetwork+0x74>
   }
   return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2206      	movs	r2, #6
 8001766:	4619      	mov	r1, r3
 8001768:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800176c:	f7ff fcdc 	bl	8001128 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2204      	movs	r2, #4
 8001776:	4619      	mov	r1, r3
 8001778:	f44f 7080 	mov.w	r0, #256	; 0x100
 800177c:	f7ff fcd4 	bl	8001128 <WIZCHIP_READ_BUF>
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2204      	movs	r2, #4
 8001786:	4619      	mov	r1, r3
 8001788:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800178c:	f7ff fccc 	bl	8001128 <WIZCHIP_READ_BUF>
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800179c:	f7ff fcc4 	bl	8001128 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fc72 	bl	800108c <WIZCHIP_WRITE>
   getMR(); // for delay
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fc23 	bl	8000ff4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2206      	movs	r2, #6
 80017b2:	4619      	mov	r1, r3
 80017b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80017b8:	f7ff fd16 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017c8:	f7ff fd0e 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	2204      	movs	r2, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80017d8:	f7ff fd06 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2204      	movs	r2, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017e8:	f7ff fcfe 	bl	80011e8 <WIZCHIP_WRITE_BUF>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001802:	f7ff ffab 	bl	800175c <wizchip_sw_reset>
   if(txsize)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03b      	beq.n	8001884 <wizchip_init+0x90>
   {
      tmp = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e015      	b.n	8001842 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	4413      	add	r3, r2
 8001824:	b2db      	uxtb	r3, r3
 8001826:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800182c:	2b10      	cmp	r3, #16
 800182e:	dd02      	ble.n	8001836 <wizchip_init+0x42>
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001834:	e066      	b.n	8001904 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	3301      	adds	r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b07      	cmp	r3, #7
 8001848:	dde5      	ble.n	8001816 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e015      	b.n	800187c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	3301      	adds	r3, #1
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800185e:	4618      	mov	r0, r3
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff fc0e 	bl	800108c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001880:	2b07      	cmp	r3, #7
 8001882:	dde5      	ble.n	8001850 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d03b      	beq.n	8001902 <wizchip_init+0x10e>
   {
      tmp = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e015      	b.n	80018c0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	4413      	add	r3, r2
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	7bbb      	ldrb	r3, [r7, #14]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80018a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	dd02      	ble.n	80018b4 <wizchip_init+0xc0>
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b2:	e027      	b.n	8001904 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	dde5      	ble.n	8001894 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e015      	b.n	80018fa <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	3301      	adds	r3, #1
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80018dc:	4618      	mov	r0, r3
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff fbcf 	bl	800108c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	dde5      	ble.n	80018ce <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	f023 030f 	bic.w	r3, r3, #15
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4619      	mov	r1, r3
 800192c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001930:	f7ff fbac 	bl	800108c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e014      	b.n	8001964 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800193a:	7bba      	ldrb	r2, [r7, #14]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	fa42 f303 	asr.w	r3, r2, r3
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <wizchip_clrinterrupt+0x52>
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3301      	adds	r3, #1
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001956:	211f      	movs	r1, #31
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fb97 	bl	800108c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	3301      	adds	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b07      	cmp	r3, #7
 8001968:	d9e7      	bls.n	800193a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001986:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800198a:	f7ff fb33 	bl	8000ff4 <WIZCHIP_READ>
 800198e:	4603      	mov	r3, r0
 8001990:	f023 030f 	bic.w	r3, r3, #15
 8001994:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8001996:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800199a:	f7ff fb2b 	bl	8000ff4 <WIZCHIP_READ>
 800199e:	4603      	mov	r3, r0
 80019a0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80019b4:	88bb      	ldrh	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	4619      	mov	r1, r3
 80019d8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80019dc:	f7ff fb56 	bl	800108c <WIZCHIP_WRITE>
   setSIMR(simr);
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	4619      	mov	r1, r3
 80019e4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80019e8:	f7ff fb50 	bl	800108c <WIZCHIP_WRITE>
#endif   
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001a06:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001a0a:	f7ff faf3 	bl	8000ff4 <WIZCHIP_READ>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001a12:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001a16:	f7ff faed 	bl	8000ff4 <WIZCHIP_READ>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001a1e:	79bb      	ldrb	r3, [r7, #6]
 8001a20:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001a30:	88bb      	ldrh	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001a40:	2300      	movs	r3, #0
 8001a42:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001a44:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a48:	f7ff fad4 	bl	8000ff4 <WIZCHIP_READ>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8001a56:	2301      	movs	r3, #1
 8001a58:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001a70:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a74:	f7ff fabe 	bl	8000ff4 <WIZCHIP_READ>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d102      	bne.n	8001a88 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001a82:	2301      	movs	r3, #1
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e001      	b.n	8001a8c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001a9e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aa2:	f7ff faa7 	bl	8000ff4 <WIZCHIP_READ>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ab0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aba:	f7ff fae7 	bl	800108c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001abe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001ac2:	f7ff fa97 	bl	8000ff4 <WIZCHIP_READ>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001ada:	f7ff fad7 	bl	800108c <WIZCHIP_WRITE>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d104      	bne.n	8001b04 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e003      	b.n	8001b0c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b0a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e019      	b.n	8001b52 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	78db      	ldrb	r3, [r3, #3]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10d      	bne.n	8001b42 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	789b      	ldrb	r3, [r3, #2]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d104      	bne.n	8001b38 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	f043 0318 	orr.w	r3, r3, #24
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e00c      	b.n	8001b52 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e007      	b.n	8001b52 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	789b      	ldrb	r3, [r3, #2]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b5a:	f7ff fa97 	bl	800108c <WIZCHIP_WRITE>
   wizphy_reset();
 8001b5e:	f7ff ff9b 	bl	8001a98 <wizphy_reset>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001b76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b7a:	f7ff fa3b 	bl	8000ff4 <WIZCHIP_READ>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	119b      	asrs	r3, r3, #6
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d001      	beq.n	8001ba0 <wizphy_getphyconf+0x36>
 8001b9c:	2b38      	cmp	r3, #56	; 0x38
 8001b9e:	d103      	bne.n	8001ba8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	705a      	strb	r2, [r3, #1]
         break;
 8001ba6:	e003      	b.n	8001bb0 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
         break;
 8001bae:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bb6:	3b10      	subs	r3, #16
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	bf8c      	ite	hi
 8001bbc:	2201      	movhi	r2, #1
 8001bbe:	2200      	movls	r2, #0
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	2a00      	cmp	r2, #0
 8001bc4:	d111      	bne.n	8001bea <wizphy_getphyconf+0x80>
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	709a      	strb	r2, [r3, #2]
         break;
 8001be8:	e003      	b.n	8001bf2 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	709a      	strb	r2, [r3, #2]
         break;
 8001bf0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf8:	3b08      	subs	r3, #8
 8001bfa:	2b18      	cmp	r3, #24
 8001bfc:	bf8c      	ite	hi
 8001bfe:	2201      	movhi	r2, #1
 8001c00:	2200      	movls	r2, #0
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d111      	bne.n	8001c2c <wizphy_getphyconf+0xc2>
 8001c08:	2201      	movs	r2, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8001c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	70da      	strb	r2, [r3, #3]
         break;
 8001c2a:	e003      	b.n	8001c34 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
         break;
 8001c32:	bf00      	nop
   }
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001c4a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c4e:	f7ff f9d1 	bl	8000ff4 <WIZCHIP_READ>
 8001c52:	4603      	mov	r3, r0
 8001c54:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <wizphy_setphypmode+0x2a>
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c64:	e030      	b.n	8001cc8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c6c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d104      	bne.n	8001c7e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	e003      	b.n	8001c86 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001c84:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c8e:	f7ff f9fd 	bl	800108c <WIZCHIP_WRITE>
   wizphy_reset();
 8001c92:	f7ff ff01 	bl	8001a98 <wizphy_reset>
   tmp = getPHYCFGR();
 8001c96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c9a:	f7ff f9ab 	bl	8000ff4 <WIZCHIP_READ>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <wizphy_setphypmode+0x88>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e008      	b.n	8001cc8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <wizphy_setphypmode+0x88>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e001      	b.n	8001cc8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2206      	movs	r2, #6
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ce2:	f7ff fa81 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	330e      	adds	r3, #14
 8001cea:	2204      	movs	r2, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cf2:	f7ff fa79 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	330a      	adds	r3, #10
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d02:	f7ff fa71 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3306      	adds	r3, #6
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d12:	f7ff fa69 	bl	80011e8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7c9a      	ldrb	r2, [r3, #18]
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <wizchip_setnetinfo+0x78>)
 8001d1c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7cda      	ldrb	r2, [r3, #19]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <wizchip_setnetinfo+0x78>)
 8001d24:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7d1a      	ldrb	r2, [r3, #20]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <wizchip_setnetinfo+0x78>)
 8001d2c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7d5a      	ldrb	r2, [r3, #21]
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <wizchip_setnetinfo+0x78>)
 8001d34:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7d9a      	ldrb	r2, [r3, #22]
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <wizchip_setnetinfo+0x7c>)
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200001dc 	.word	0x200001dc
 8001d4c:	200001e0 	.word	0x200001e0

08001d50 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001d62:	f7ff f9e1 	bl	8001128 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	330e      	adds	r3, #14
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d72:	f7ff f9d9 	bl	8001128 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	330a      	adds	r3, #10
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d82:	f7ff f9d1 	bl	8001128 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3306      	adds	r3, #6
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d92:	f7ff f9c9 	bl	8001128 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <wizchip_getnetinfo+0x78>)
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <wizchip_getnetinfo+0x78>)
 8001da0:	785a      	ldrb	r2, [r3, #1]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <wizchip_getnetinfo+0x78>)
 8001da8:	789a      	ldrb	r2, [r3, #2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <wizchip_getnetinfo+0x78>)
 8001db0:	78da      	ldrb	r2, [r3, #3]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <wizchip_getnetinfo+0x7c>)
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	759a      	strb	r2, [r3, #22]
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200001dc 	.word	0x200001dc
 8001dcc:	200001e0 	.word	0x200001e0

08001dd0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <wizchip_setnetmode+0x1e>
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dec:	e00e      	b.n	8001e0c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff f900 	bl	8000ff4 <WIZCHIP_READ>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	4619      	mov	r1, r3
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff f941 	bl	800108c <WIZCHIP_WRITE>
   return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff f8eb 	bl	8000ff4 <WIZCHIP_READ>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001e36:	f7ff f929 	bl	800108c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	885b      	ldrh	r3, [r3, #2]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001e4a:	f7ff f91f 	bl	800108c <WIZCHIP_WRITE>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	885b      	ldrh	r3, [r3, #2]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001e5a:	f7ff f917 	bl	800108c <WIZCHIP_WRITE>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001e6e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001e72:	f7ff f8bf 	bl	8000ff4 <WIZCHIP_READ>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001e7e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001e82:	f7ff f8b7 	bl	8000ff4 <WIZCHIP_READ>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b29c      	uxth	r4, r3
 8001e8e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001e92:	f7ff f8af 	bl	8000ff4 <WIZCHIP_READ>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4423      	add	r3, r4
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	805a      	strh	r2, [r3, #2]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_Init+0x28>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_Init+0x28>)
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 f92b 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7fe fba2 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f935 	bl	8002166 <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f14:	f000 f90b 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000028 	.word	0x20000028
 8001f30:	20000060 	.word	0x20000060
 8001f34:	2000005c 	.word	0x2000005c

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x20>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <HAL_IncTick+0x20>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	20000060 	.word	0x20000060
 8001f58:	200001e4 	.word	0x200001e4

08001f5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <HAL_GetTick+0x10>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	200001e4 	.word	0x200001e4

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffe0 	bl	8001f5c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000060 	.word	0x20000060

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f8:	f7ff ff90 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff49 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff5e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffb0 	bl	80020d4 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e169      	b.n	8002468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002194:	2201      	movs	r2, #1
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8158 	bne.w	8002462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a9a      	ldr	r2, [pc, #616]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d05e      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021bc:	4a98      	ldr	r2, [pc, #608]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d875      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021c2:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d058      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021c8:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d86f      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021ce:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d052      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021d4:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d869      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021da:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04c      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d863      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021e6:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d046      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021ec:	4a90      	ldr	r2, [pc, #576]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d85d      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d82a      	bhi.n	800224c <HAL_GPIO_Init+0xcc>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d859      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_GPIO_Init+0x80>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800227b 	.word	0x0800227b
 8002204:	08002255 	.word	0x08002255
 8002208:	08002267 	.word	0x08002267
 800220c:	080022a9 	.word	0x080022a9
 8002210:	080022af 	.word	0x080022af
 8002214:	080022af 	.word	0x080022af
 8002218:	080022af 	.word	0x080022af
 800221c:	080022af 	.word	0x080022af
 8002220:	080022af 	.word	0x080022af
 8002224:	080022af 	.word	0x080022af
 8002228:	080022af 	.word	0x080022af
 800222c:	080022af 	.word	0x080022af
 8002230:	080022af 	.word	0x080022af
 8002234:	080022af 	.word	0x080022af
 8002238:	080022af 	.word	0x080022af
 800223c:	080022af 	.word	0x080022af
 8002240:	080022af 	.word	0x080022af
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002271 	.word	0x08002271
 800224c:	4a79      	ldr	r2, [pc, #484]	; (8002434 <HAL_GPIO_Init+0x2b4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002252:	e02c      	b.n	80022ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e029      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	3304      	adds	r3, #4
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e024      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	3308      	adds	r3, #8
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e01f      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	330c      	adds	r3, #12
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e01a      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002282:	2304      	movs	r3, #4
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e013      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002290:	2308      	movs	r3, #8
 8002292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	611a      	str	r2, [r3, #16]
          break;
 800229a:	e009      	b.n	80022b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	615a      	str	r2, [r3, #20]
          break;
 80022a6:	e003      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          break;
 80022ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d801      	bhi.n	80022ba <HAL_GPIO_Init+0x13a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	e001      	b.n	80022be <HAL_GPIO_Init+0x13e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d802      	bhi.n	80022cc <HAL_GPIO_Init+0x14c>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_GPIO_Init+0x152>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3b08      	subs	r3, #8
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	210f      	movs	r1, #15
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	6a39      	ldr	r1, [r7, #32]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80b1 	beq.w	8002462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_GPIO_Init+0x2bc>)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_GPIO_Init+0x2c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_GPIO_Init+0x1ec>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_GPIO_Init+0x2c4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_GPIO_Init+0x1e8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_GPIO_Init+0x2c8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x1e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <HAL_GPIO_Init+0x2cc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_Init+0x1e0>
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002360:	2304      	movs	r3, #4
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 800236c:	2300      	movs	r3, #0
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237e:	492f      	ldr	r1, [pc, #188]	; (800243c <HAL_GPIO_Init+0x2bc>)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	492c      	ldr	r1, [pc, #176]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4928      	ldr	r1, [pc, #160]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	491e      	ldr	r1, [pc, #120]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d021      	beq.n	8002454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
 800241c:	e021      	b.n	8002462 <HAL_GPIO_Init+0x2e2>
 800241e:	bf00      	nop
 8002420:	10320000 	.word	0x10320000
 8002424:	10310000 	.word	0x10310000
 8002428:	10220000 	.word	0x10220000
 800242c:	10210000 	.word	0x10210000
 8002430:	10120000 	.word	0x10120000
 8002434:	10110000 	.word	0x10110000
 8002438:	40021000 	.word	0x40021000
 800243c:	40010000 	.word	0x40010000
 8002440:	40010800 	.word	0x40010800
 8002444:	40010c00 	.word	0x40010c00
 8002448:	40011000 	.word	0x40011000
 800244c:	40011400 	.word	0x40011400
 8002450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_GPIO_Init+0x304>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	43db      	mvns	r3, r3
 800245c:	4909      	ldr	r1, [pc, #36]	; (8002484 <HAL_GPIO_Init+0x304>)
 800245e:	4013      	ands	r3, r2
 8002460:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f ae8e 	bne.w	8002194 <HAL_GPIO_Init+0x14>
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	372c      	adds	r7, #44	; 0x2c
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	041a      	lsls	r2, r3, #16
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43d9      	mvns	r1, r3
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	400b      	ands	r3, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e272      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b92      	ldr	r3, [pc, #584]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b89      	ldr	r3, [pc, #548]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x12c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e24c      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x76>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7f      	ldr	r2, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x98>
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7a      	ldr	r2, [pc, #488]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xbc>
 800258e:	4b72      	ldr	r3, [pc, #456]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a71      	ldr	r2, [pc, #452]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6e      	ldr	r2, [pc, #440]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd4>
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a67      	ldr	r2, [pc, #412]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fcc8 	bl	8001f5c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fcc4 	bl	8001f5c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e200      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe4>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7ff fcb4 	bl	8001f5c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fcb0 	bl	8001f5c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1ec      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x10c>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d063      	beq.n	80026ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1c0      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4939      	ldr	r1, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e03a      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_RCC_OscConfig+0x270>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7ff fc69 	bl	8001f5c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268e:	f7ff fc65 	bl	8001f5c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1a1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4927      	ldr	r1, [pc, #156]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x270>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff fc48 	bl	8001f5c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7ff fc44 	bl	8001f5c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e180      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d03a      	beq.n	8002770 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d019      	beq.n	8002736 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff fc28 	bl	8001f5c <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff fc24 	bl	8001f5c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e160      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_RCC_OscConfig+0x26c>)
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 fad8 	bl	8002ce4 <RCC_Delay>
 8002734:	e01c      	b.n	8002770 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_RCC_OscConfig+0x274>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7ff fc0e 	bl	8001f5c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00f      	b.n	8002764 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff fc0a 	bl	8001f5c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d908      	bls.n	8002764 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e146      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	42420000 	.word	0x42420000
 8002760:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e9      	bne.n	8002744 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a6 	beq.w	80028ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10d      	bne.n	80027aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a87      	ldr	r2, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027aa:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b6:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7e      	ldr	r2, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7ff fbcb 	bl	8001f5c <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7ff fbc7 	bl	8001f5c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e103      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x4c8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x312>
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e02d      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x334>
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a69      	ldr	r2, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6213      	str	r3, [r2, #32]
 8002812:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	e01c      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b05      	cmp	r3, #5
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x356>
 8002828:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6213      	str	r3, [r2, #32]
 8002834:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6213      	str	r3, [r2, #32]
 8002840:	e00b      	b.n	800285a <HAL_RCC_OscConfig+0x36e>
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a5a      	ldr	r2, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4a57      	ldr	r2, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	f023 0304 	bic.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d015      	beq.n	800288e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb7b 	bl	8001f5c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff fb77 	bl	8001f5c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0b1      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ee      	beq.n	800286a <HAL_RCC_OscConfig+0x37e>
 800288c:	e014      	b.n	80028b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7ff fb65 	bl	8001f5c <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff fb61 	bl	8001f5c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e09b      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ee      	bne.n	8002896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d061      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d146      	bne.n	8002976 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff fb35 	bl	8001f5c <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff fb31 	bl	8001f5c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e06d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002908:	4b29      	ldr	r3, [pc, #164]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4921      	ldr	r1, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a19      	ldr	r1, [r3, #32]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	430b      	orrs	r3, r1
 8002942:	491b      	ldr	r1, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294e:	f7ff fb05 	bl	8001f5c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002956:	f7ff fb01 	bl	8001f5c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x46a>
 8002974:	e035      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7ff faee 	bl	8001f5c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff faea 	bl	8001f5c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e026      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x498>
 80029a2:	e01e      	b.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e019      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_OscConfig+0x500>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d0      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4965      	ldr	r1, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d040      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e073      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7ff fa3c 	bl	8001f5c <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7ff fa38 	bl	8001f5c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e053      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d210      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 0207 	bic.w	r2, r3, #7
 8002b26:	4922      	ldr	r1, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1cc>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f99a 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004678 	.word	0x08004678
 8002bbc:	20000028 	.word	0x20000028
 8002bc0:	2000005c 	.word	0x2000005c

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b490      	push	{r4, r7}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bcc:	1d3c      	adds	r4, r7, #4
 8002bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd4:	f240 2301 	movw	r3, #513	; 0x201
 8002bd8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d002      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x46>
 8002c02:	e02b      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c06:	623b      	str	r3, [r7, #32]
      break;
 8002c08:	e02b      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	0c9b      	lsrs	r3, r3, #18
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	3328      	adds	r3, #40	; 0x28
 8002c14:	443b      	add	r3, r7
 8002c16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c1a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	0c5b      	lsrs	r3, r3, #17
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	3328      	adds	r3, #40	; 0x28
 8002c32:	443b      	add	r3, r7
 8002c34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	623b      	str	r3, [r7, #32]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c5e:	623b      	str	r3, [r7, #32]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc90      	pop	{r4, r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	08004668 	.word	0x08004668
 8002c74:	40021000 	.word	0x40021000
 8002c78:	007a1200 	.word	0x007a1200
 8002c7c:	003d0900 	.word	0x003d0900

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000028 	.word	0x20000028

08002c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c98:	f7ff fff2 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	08004688 	.word	0x08004688

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cc0:	f7ff ffde 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0adb      	lsrs	r3, r3, #11
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4903      	ldr	r1, [pc, #12]	; (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08004688 	.word	0x08004688

08002ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <RCC_Delay+0x34>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <RCC_Delay+0x38>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0a5b      	lsrs	r3, r3, #9
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d00:	bf00      	nop
  }
  while (Delay --);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	60fa      	str	r2, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f9      	bne.n	8002d00 <RCC_Delay+0x1c>
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000028 	.word	0x20000028
 8002d1c:	10624dd3 	.word	0x10624dd3

08002d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e076      	b.n	8002e20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d42:	d009      	beq.n	8002d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
 8002d4a:	e005      	b.n	8002d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fc7e 	bl	8000674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	ea42 0103 	orr.w	r1, r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	0c1a      	lsrs	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f002 0204 	and.w	r2, r2, #4
 8002dfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_SPI_Transmit+0x22>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e126      	b.n	8003098 <HAL_SPI_Transmit+0x270>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e52:	f7ff f883 	bl	8001f5c <HAL_GetTick>
 8002e56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d002      	beq.n	8002e6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e6c:	e10b      	b.n	8003086 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Transmit+0x52>
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e7e:	e102      	b.n	8003086 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d007      	beq.n	8002f06 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0e:	d14b      	bne.n	8002fa8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_Transmit+0xf6>
 8002f18:	8afb      	ldrh	r3, [r7, #22]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d13e      	bne.n	8002f9c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f42:	e02b      	b.n	8002f9c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d112      	bne.n	8002f78 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f76:	e011      	b.n	8002f9c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f78:	f7fe fff0 	bl	8001f5c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d803      	bhi.n	8002f90 <HAL_SPI_Transmit+0x168>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Transmit+0x16e>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f9a:	e074      	b.n	8003086 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ce      	bne.n	8002f44 <HAL_SPI_Transmit+0x11c>
 8002fa6:	e04c      	b.n	8003042 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_Transmit+0x18e>
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d140      	bne.n	8003038 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fdc:	e02c      	b.n	8003038 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d113      	bne.n	8003014 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	86da      	strh	r2, [r3, #54]	; 0x36
 8003012:	e011      	b.n	8003038 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003014:	f7fe ffa2 	bl	8001f5c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d803      	bhi.n	800302c <HAL_SPI_Transmit+0x204>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d102      	bne.n	8003032 <HAL_SPI_Transmit+0x20a>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003036:	e026      	b.n	8003086 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1cd      	bne.n	8002fde <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fbb8 	bl	80037bc <SPI_EndRxTxTransaction>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e000      	b.n	8003086 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003084:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003096:	7ffb      	ldrb	r3, [r7, #31]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030bc:	d112      	bne.n	80030e4 <HAL_SPI_Receive+0x44>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10e      	bne.n	80030e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2204      	movs	r2, #4
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8f1 	bl	80032c2 <HAL_SPI_TransmitReceive>
 80030e0:	4603      	mov	r3, r0
 80030e2:	e0ea      	b.n	80032ba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_SPI_Receive+0x52>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0e3      	b.n	80032ba <HAL_SPI_Receive+0x21a>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fa:	f7fe ff2f 	bl	8001f5c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003110:	e0ca      	b.n	80032a8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_SPI_Receive+0x7e>
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003122:	e0c1      	b.n	80032a8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2204      	movs	r2, #4
 8003128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316a:	d10f      	bne.n	800318c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d007      	beq.n	80031aa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d162      	bne.n	8003278 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031b2:	e02e      	b.n	8003212 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f103 020c 	add.w	r2, r3, #12
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031ec:	e011      	b.n	8003212 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ee:	f7fe feb5 	bl	8001f5c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d803      	bhi.n	8003206 <HAL_SPI_Receive+0x166>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003204:	d102      	bne.n	800320c <HAL_SPI_Receive+0x16c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003210:	e04a      	b.n	80032a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1cb      	bne.n	80031b4 <HAL_SPI_Receive+0x114>
 800321c:	e031      	b.n	8003282 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d113      	bne.n	8003254 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	b292      	uxth	r2, r2
 8003238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003252:	e011      	b.n	8003278 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003254:	f7fe fe82 	bl	8001f5c <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d803      	bhi.n	800326c <HAL_SPI_Receive+0x1cc>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326a:	d102      	bne.n	8003272 <HAL_SPI_Receive+0x1d2>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003276:	e017      	b.n	80032a8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cd      	bne.n	800321e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa46 	bl	8003718 <SPI_EndRxTransaction>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
 80032a4:	e000      	b.n	80032a8 <HAL_SPI_Receive+0x208>
  }

error :
 80032a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08c      	sub	sp, #48	; 0x30
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x26>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e18a      	b.n	80035fe <HAL_SPI_TransmitReceive+0x33c>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032f0:	f7fe fe34 	bl	8001f5c <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800330a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800330e:	2b01      	cmp	r3, #1
 8003310:	d00f      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x70>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003318:	d107      	bne.n	800332a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_SPI_TransmitReceive+0x68>
 8003322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003330:	e15b      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x82>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x82>
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800334a:	e14e      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b04      	cmp	r3, #4
 8003356:	d003      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2205      	movs	r2, #5
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d007      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	d178      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x10a>
 80033c6:	8b7b      	ldrh	r3, [r7, #26]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d166      	bne.n	800349a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f0:	e053      	b.n	800349a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d11b      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x176>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x176>
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d113      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d119      	bne.n	800347a <HAL_SPI_TransmitReceive+0x1b8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	b292      	uxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800347a:	f7fe fd6f 	bl	8001f5c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003486:	429a      	cmp	r2, r3
 8003488:	d807      	bhi.n	800349a <HAL_SPI_TransmitReceive+0x1d8>
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003490:	d003      	beq.n	800349a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003498:	e0a7      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1a6      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x130>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1a1      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x130>
 80034ae:	e07c      	b.n	80035aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_TransmitReceive+0x1fc>
 80034b8:	8b7b      	ldrh	r3, [r7, #26]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d16b      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e4:	e057      	b.n	8003596 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d11c      	bne.n	800352e <HAL_SPI_TransmitReceive+0x26c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_SPI_TransmitReceive+0x26c>
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d114      	bne.n	800352e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d119      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2ae>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d014      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800356c:	2301      	movs	r3, #1
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003570:	f7fe fcf4 	bl	8001f5c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357c:	429a      	cmp	r2, r3
 800357e:	d803      	bhi.n	8003588 <HAL_SPI_TransmitReceive+0x2c6>
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003586:	d102      	bne.n	800358e <HAL_SPI_TransmitReceive+0x2cc>
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003594:	e029      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1a2      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x224>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d19d      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f904 	bl	80037bc <SPI_EndRxTxTransaction>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035c6:	e010      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	e000      	b.n	80035ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3730      	adds	r7, #48	; 0x30
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003618:	f7fe fca0 	bl	8001f5c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	4413      	add	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003628:	f7fe fc98 	bl	8001f5c <HAL_GetTick>
 800362c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800362e:	4b39      	ldr	r3, [pc, #228]	; (8003714 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	015b      	lsls	r3, r3, #5
 8003634:	0d1b      	lsrs	r3, r3, #20
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800363e:	e054      	b.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003646:	d050      	beq.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003648:	f7fe fc88 	bl	8001f5c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	429a      	cmp	r2, r3
 8003656:	d902      	bls.n	800365e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800366c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003676:	d111      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d004      	beq.n	800368c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d107      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a4:	d10f      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e017      	b.n	800370a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d19b      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000028 	.word	0x20000028

08003718 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372c:	d111      	bne.n	8003752 <SPI_EndRxTransaction+0x3a>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d004      	beq.n	8003742 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	d107      	bne.n	8003752 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800375a:	d117      	bne.n	800378c <SPI_EndRxTransaction+0x74>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d112      	bne.n	800378c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	2101      	movs	r1, #1
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff ff49 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01a      	beq.n	80037b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e013      	b.n	80037b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff ff36 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e000      	b.n	80037b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ff18 	bl	8003608 <SPI_WaitFlagStateUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e000      	b.n	80037f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e03f      	b.n	800388a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fc ff72 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f905 	bl	8003a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b08a      	sub	sp, #40	; 0x28
 8003896:	af02      	add	r7, sp, #8
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d17c      	bne.n	80039ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_UART_Transmit+0x2c>
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e075      	b.n	80039ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Transmit+0x3e>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e06e      	b.n	80039ae <HAL_UART_Transmit+0x11c>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e6:	f7fe fb39 	bl	8001f5c <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d108      	bne.n	8003914 <HAL_UART_Transmit+0x82>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003924:	e02a      	b.n	800397c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f840 	bl	80039b6 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e036      	b.n	80039ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	3302      	adds	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e007      	b.n	800396e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3301      	adds	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cf      	bne.n	8003926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f810 	bl	80039b6 <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e006      	b.n	80039ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c6:	e02c      	b.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ce:	d028      	beq.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d6:	f7fe fac1 	bl	8001f5c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d21d      	bcs.n	8003a22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00f      	b.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d0c3      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a86:	f023 030c 	bic.w	r3, r3, #12
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	430b      	orrs	r3, r1
 8003a92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <UART_SetConfig+0x114>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7ff f902 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	e002      	b.n	8003ac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7ff f8ea 	bl	8002c94 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009a      	lsls	r2, r3, #2
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <UART_SetConfig+0x118>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	0119      	lsls	r1, r3, #4
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <UART_SetConfig+0x118>)
 8003afa:	fba3 0302 	umull	r0, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2064      	movs	r0, #100	; 0x64
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <UART_SetConfig+0x118>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b18:	4419      	add	r1, r3
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009a      	lsls	r2, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <UART_SetConfig+0x118>)
 8003b32:	fba3 0302 	umull	r0, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2064      	movs	r0, #100	; 0x64
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <UART_SetConfig+0x118>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	440a      	add	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40013800 	.word	0x40013800
 8003b64:	51eb851f 	.word	0x51eb851f

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	; (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000064 	.word	0x20000064

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	2600      	movs	r6, #0
 8003b78:	4d0c      	ldr	r5, [pc, #48]	; (8003bac <__libc_init_array+0x38>)
 8003b7a:	4c0d      	ldr	r4, [pc, #52]	; (8003bb0 <__libc_init_array+0x3c>)
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	f000 fc9c 	bl	80044c0 <_init>
 8003b88:	2600      	movs	r6, #0
 8003b8a:	4d0a      	ldr	r5, [pc, #40]	; (8003bb4 <__libc_init_array+0x40>)
 8003b8c:	4c0a      	ldr	r4, [pc, #40]	; (8003bb8 <__libc_init_array+0x44>)
 8003b8e:	1b64      	subs	r4, r4, r5
 8003b90:	10a4      	asrs	r4, r4, #2
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	080046c4 	.word	0x080046c4
 8003bb0:	080046c4 	.word	0x080046c4
 8003bb4:	080046c4 	.word	0x080046c4
 8003bb8:	080046c8 	.word	0x080046c8

08003bbc <memset>:
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4402      	add	r2, r0
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <memset+0xa>
 8003bc4:	4770      	bx	lr
 8003bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bca:	e7f9      	b.n	8003bc0 <memset+0x4>

08003bcc <siprintf>:
 8003bcc:	b40e      	push	{r1, r2, r3}
 8003bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	9107      	str	r1, [sp, #28]
 8003bde:	9104      	str	r1, [sp, #16]
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <siprintf+0x38>)
 8003be2:	4909      	ldr	r1, [pc, #36]	; (8003c08 <siprintf+0x3c>)
 8003be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be8:	9105      	str	r1, [sp, #20]
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	a902      	add	r1, sp, #8
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	f000 f868 	bl	8003cc4 <_svfiprintf_r>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	9b02      	ldr	r3, [sp, #8]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	b01c      	add	sp, #112	; 0x70
 8003bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c00:	b003      	add	sp, #12
 8003c02:	4770      	bx	lr
 8003c04:	20000064 	.word	0x20000064
 8003c08:	ffff0208 	.word	0xffff0208

08003c0c <__ssputs_r>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	688e      	ldr	r6, [r1, #8]
 8003c12:	4682      	mov	sl, r0
 8003c14:	429e      	cmp	r6, r3
 8003c16:	460c      	mov	r4, r1
 8003c18:	4690      	mov	r8, r2
 8003c1a:	461f      	mov	r7, r3
 8003c1c:	d838      	bhi.n	8003c90 <__ssputs_r+0x84>
 8003c1e:	898a      	ldrh	r2, [r1, #12]
 8003c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c24:	d032      	beq.n	8003c8c <__ssputs_r+0x80>
 8003c26:	6825      	ldr	r5, [r4, #0]
 8003c28:	6909      	ldr	r1, [r1, #16]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	eba5 0901 	sub.w	r9, r5, r1
 8003c30:	6965      	ldr	r5, [r4, #20]
 8003c32:	444b      	add	r3, r9
 8003c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c3c:	106d      	asrs	r5, r5, #1
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	bf38      	it	cc
 8003c42:	461d      	movcc	r5, r3
 8003c44:	0553      	lsls	r3, r2, #21
 8003c46:	d531      	bpl.n	8003cac <__ssputs_r+0xa0>
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f000 fb6f 	bl	800432c <_malloc_r>
 8003c4e:	4606      	mov	r6, r0
 8003c50:	b950      	cbnz	r0, 8003c68 <__ssputs_r+0x5c>
 8003c52:	230c      	movs	r3, #12
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	f8ca 3000 	str.w	r3, [sl]
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	464a      	mov	r2, r9
 8003c6a:	6921      	ldr	r1, [r4, #16]
 8003c6c:	f000 face 	bl	800420c <memcpy>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	6126      	str	r6, [r4, #16]
 8003c7e:	444e      	add	r6, r9
 8003c80:	6026      	str	r6, [r4, #0]
 8003c82:	463e      	mov	r6, r7
 8003c84:	6165      	str	r5, [r4, #20]
 8003c86:	eba5 0509 	sub.w	r5, r5, r9
 8003c8a:	60a5      	str	r5, [r4, #8]
 8003c8c:	42be      	cmp	r6, r7
 8003c8e:	d900      	bls.n	8003c92 <__ssputs_r+0x86>
 8003c90:	463e      	mov	r6, r7
 8003c92:	4632      	mov	r2, r6
 8003c94:	4641      	mov	r1, r8
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	f000 fac6 	bl	8004228 <memmove>
 8003c9c:	68a3      	ldr	r3, [r4, #8]
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	1b9b      	subs	r3, r3, r6
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	4433      	add	r3, r6
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	e7db      	b.n	8003c64 <__ssputs_r+0x58>
 8003cac:	462a      	mov	r2, r5
 8003cae:	f000 fbb1 	bl	8004414 <_realloc_r>
 8003cb2:	4606      	mov	r6, r0
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d1e1      	bne.n	8003c7c <__ssputs_r+0x70>
 8003cb8:	4650      	mov	r0, sl
 8003cba:	6921      	ldr	r1, [r4, #16]
 8003cbc:	f000 face 	bl	800425c <_free_r>
 8003cc0:	e7c7      	b.n	8003c52 <__ssputs_r+0x46>
	...

08003cc4 <_svfiprintf_r>:
 8003cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc8:	4698      	mov	r8, r3
 8003cca:	898b      	ldrh	r3, [r1, #12]
 8003ccc:	4607      	mov	r7, r0
 8003cce:	061b      	lsls	r3, r3, #24
 8003cd0:	460d      	mov	r5, r1
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	b09d      	sub	sp, #116	; 0x74
 8003cd6:	d50e      	bpl.n	8003cf6 <_svfiprintf_r+0x32>
 8003cd8:	690b      	ldr	r3, [r1, #16]
 8003cda:	b963      	cbnz	r3, 8003cf6 <_svfiprintf_r+0x32>
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	f000 fb25 	bl	800432c <_malloc_r>
 8003ce2:	6028      	str	r0, [r5, #0]
 8003ce4:	6128      	str	r0, [r5, #16]
 8003ce6:	b920      	cbnz	r0, 8003cf2 <_svfiprintf_r+0x2e>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf0:	e0d1      	b.n	8003e96 <_svfiprintf_r+0x1d2>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	616b      	str	r3, [r5, #20]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d00:	2330      	movs	r3, #48	; 0x30
 8003d02:	f04f 0901 	mov.w	r9, #1
 8003d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003eb0 <_svfiprintf_r+0x1ec>
 8003d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d12:	4623      	mov	r3, r4
 8003d14:	469a      	mov	sl, r3
 8003d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1a:	b10a      	cbz	r2, 8003d20 <_svfiprintf_r+0x5c>
 8003d1c:	2a25      	cmp	r2, #37	; 0x25
 8003d1e:	d1f9      	bne.n	8003d14 <_svfiprintf_r+0x50>
 8003d20:	ebba 0b04 	subs.w	fp, sl, r4
 8003d24:	d00b      	beq.n	8003d3e <_svfiprintf_r+0x7a>
 8003d26:	465b      	mov	r3, fp
 8003d28:	4622      	mov	r2, r4
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	f7ff ff6d 	bl	8003c0c <__ssputs_r>
 8003d32:	3001      	adds	r0, #1
 8003d34:	f000 80aa 	beq.w	8003e8c <_svfiprintf_r+0x1c8>
 8003d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d3a:	445a      	add	r2, fp
 8003d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a2 	beq.w	8003e8c <_svfiprintf_r+0x1c8>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d52:	f10a 0a01 	add.w	sl, sl, #1
 8003d56:	9304      	str	r3, [sp, #16]
 8003d58:	9307      	str	r3, [sp, #28]
 8003d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d60:	4654      	mov	r4, sl
 8003d62:	2205      	movs	r2, #5
 8003d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d68:	4851      	ldr	r0, [pc, #324]	; (8003eb0 <_svfiprintf_r+0x1ec>)
 8003d6a:	f000 fa41 	bl	80041f0 <memchr>
 8003d6e:	9a04      	ldr	r2, [sp, #16]
 8003d70:	b9d8      	cbnz	r0, 8003daa <_svfiprintf_r+0xe6>
 8003d72:	06d0      	lsls	r0, r2, #27
 8003d74:	bf44      	itt	mi
 8003d76:	2320      	movmi	r3, #32
 8003d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d7c:	0711      	lsls	r1, r2, #28
 8003d7e:	bf44      	itt	mi
 8003d80:	232b      	movmi	r3, #43	; 0x2b
 8003d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d86:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8c:	d015      	beq.n	8003dba <_svfiprintf_r+0xf6>
 8003d8e:	4654      	mov	r4, sl
 8003d90:	2000      	movs	r0, #0
 8003d92:	f04f 0c0a 	mov.w	ip, #10
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	4621      	mov	r1, r4
 8003d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d9e:	3b30      	subs	r3, #48	; 0x30
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	d94e      	bls.n	8003e42 <_svfiprintf_r+0x17e>
 8003da4:	b1b0      	cbz	r0, 8003dd4 <_svfiprintf_r+0x110>
 8003da6:	9207      	str	r2, [sp, #28]
 8003da8:	e014      	b.n	8003dd4 <_svfiprintf_r+0x110>
 8003daa:	eba0 0308 	sub.w	r3, r0, r8
 8003dae:	fa09 f303 	lsl.w	r3, r9, r3
 8003db2:	4313      	orrs	r3, r2
 8003db4:	46a2      	mov	sl, r4
 8003db6:	9304      	str	r3, [sp, #16]
 8003db8:	e7d2      	b.n	8003d60 <_svfiprintf_r+0x9c>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	1d19      	adds	r1, r3, #4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	9103      	str	r1, [sp, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfbb      	ittet	lt
 8003dc6:	425b      	neglt	r3, r3
 8003dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dcc:	9307      	strge	r3, [sp, #28]
 8003dce:	9307      	strlt	r3, [sp, #28]
 8003dd0:	bfb8      	it	lt
 8003dd2:	9204      	strlt	r2, [sp, #16]
 8003dd4:	7823      	ldrb	r3, [r4, #0]
 8003dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8003dd8:	d10c      	bne.n	8003df4 <_svfiprintf_r+0x130>
 8003dda:	7863      	ldrb	r3, [r4, #1]
 8003ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dde:	d135      	bne.n	8003e4c <_svfiprintf_r+0x188>
 8003de0:	9b03      	ldr	r3, [sp, #12]
 8003de2:	3402      	adds	r4, #2
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	9203      	str	r2, [sp, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003df2:	9305      	str	r3, [sp, #20]
 8003df4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003eb4 <_svfiprintf_r+0x1f0>
 8003df8:	2203      	movs	r2, #3
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	7821      	ldrb	r1, [r4, #0]
 8003dfe:	f000 f9f7 	bl	80041f0 <memchr>
 8003e02:	b140      	cbz	r0, 8003e16 <_svfiprintf_r+0x152>
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	eba0 000a 	sub.w	r0, r0, sl
 8003e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e0e:	9b04      	ldr	r3, [sp, #16]
 8003e10:	3401      	adds	r4, #1
 8003e12:	4303      	orrs	r3, r0
 8003e14:	9304      	str	r3, [sp, #16]
 8003e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <_svfiprintf_r+0x1f4>)
 8003e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e22:	f000 f9e5 	bl	80041f0 <memchr>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d038      	beq.n	8003e9c <_svfiprintf_r+0x1d8>
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <_svfiprintf_r+0x1f8>)
 8003e2c:	bb1b      	cbnz	r3, 8003e76 <_svfiprintf_r+0x1b2>
 8003e2e:	9b03      	ldr	r3, [sp, #12]
 8003e30:	3307      	adds	r3, #7
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	3308      	adds	r3, #8
 8003e38:	9303      	str	r3, [sp, #12]
 8003e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3c:	4433      	add	r3, r6
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	e767      	b.n	8003d12 <_svfiprintf_r+0x4e>
 8003e42:	460c      	mov	r4, r1
 8003e44:	2001      	movs	r0, #1
 8003e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4a:	e7a5      	b.n	8003d98 <_svfiprintf_r+0xd4>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f04f 0c0a 	mov.w	ip, #10
 8003e52:	4619      	mov	r1, r3
 8003e54:	3401      	adds	r4, #1
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e5e:	3a30      	subs	r2, #48	; 0x30
 8003e60:	2a09      	cmp	r2, #9
 8003e62:	d903      	bls.n	8003e6c <_svfiprintf_r+0x1a8>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0c5      	beq.n	8003df4 <_svfiprintf_r+0x130>
 8003e68:	9105      	str	r1, [sp, #20]
 8003e6a:	e7c3      	b.n	8003df4 <_svfiprintf_r+0x130>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	2301      	movs	r3, #1
 8003e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e74:	e7f0      	b.n	8003e58 <_svfiprintf_r+0x194>
 8003e76:	ab03      	add	r3, sp, #12
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	462a      	mov	r2, r5
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <_svfiprintf_r+0x1fc>)
 8003e80:	a904      	add	r1, sp, #16
 8003e82:	f3af 8000 	nop.w
 8003e86:	1c42      	adds	r2, r0, #1
 8003e88:	4606      	mov	r6, r0
 8003e8a:	d1d6      	bne.n	8003e3a <_svfiprintf_r+0x176>
 8003e8c:	89ab      	ldrh	r3, [r5, #12]
 8003e8e:	065b      	lsls	r3, r3, #25
 8003e90:	f53f af2c 	bmi.w	8003cec <_svfiprintf_r+0x28>
 8003e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e96:	b01d      	add	sp, #116	; 0x74
 8003e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <_svfiprintf_r+0x1fc>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	f000 f87c 	bl	8003fa4 <_printf_i>
 8003eac:	e7eb      	b.n	8003e86 <_svfiprintf_r+0x1c2>
 8003eae:	bf00      	nop
 8003eb0:	08004690 	.word	0x08004690
 8003eb4:	08004696 	.word	0x08004696
 8003eb8:	0800469a 	.word	0x0800469a
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c0d 	.word	0x08003c0d

08003ec4 <_printf_common>:
 8003ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec8:	4616      	mov	r6, r2
 8003eca:	4699      	mov	r9, r3
 8003ecc:	688a      	ldr	r2, [r1, #8]
 8003ece:	690b      	ldr	r3, [r1, #16]
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	bfb8      	it	lt
 8003ed6:	4613      	movlt	r3, r2
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee4:	b10a      	cbz	r2, 8003eea <_printf_common+0x26>
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	0699      	lsls	r1, r3, #26
 8003eee:	bf42      	ittt	mi
 8003ef0:	6833      	ldrmi	r3, [r6, #0]
 8003ef2:	3302      	addmi	r3, #2
 8003ef4:	6033      	strmi	r3, [r6, #0]
 8003ef6:	6825      	ldr	r5, [r4, #0]
 8003ef8:	f015 0506 	ands.w	r5, r5, #6
 8003efc:	d106      	bne.n	8003f0c <_printf_common+0x48>
 8003efe:	f104 0a19 	add.w	sl, r4, #25
 8003f02:	68e3      	ldr	r3, [r4, #12]
 8003f04:	6832      	ldr	r2, [r6, #0]
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	42ab      	cmp	r3, r5
 8003f0a:	dc28      	bgt.n	8003f5e <_printf_common+0x9a>
 8003f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f10:	1e13      	subs	r3, r2, #0
 8003f12:	6822      	ldr	r2, [r4, #0]
 8003f14:	bf18      	it	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	0692      	lsls	r2, r2, #26
 8003f1a:	d42d      	bmi.n	8003f78 <_printf_common+0xb4>
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	47c0      	blx	r8
 8003f26:	3001      	adds	r0, #1
 8003f28:	d020      	beq.n	8003f6c <_printf_common+0xa8>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	68e5      	ldr	r5, [r4, #12]
 8003f2e:	f003 0306 	and.w	r3, r3, #6
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf18      	it	ne
 8003f36:	2500      	movne	r5, #0
 8003f38:	6832      	ldr	r2, [r6, #0]
 8003f3a:	f04f 0600 	mov.w	r6, #0
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	bf08      	it	eq
 8003f42:	1aad      	subeq	r5, r5, r2
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	bf08      	it	eq
 8003f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bfc4      	itt	gt
 8003f50:	1a9b      	subgt	r3, r3, r2
 8003f52:	18ed      	addgt	r5, r5, r3
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xcc>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xac>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xb0>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c4      	b.n	8003f02 <_printf_common+0x3e>
 8003f78:	2030      	movs	r0, #48	; 0x30
 8003f7a:	18e1      	adds	r1, r4, r3
 8003f7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f86:	4422      	add	r2, r4
 8003f88:	3302      	adds	r3, #2
 8003f8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8e:	e7c5      	b.n	8003f1c <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa8>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x92>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	7e0f      	ldrb	r7, [r1, #24]
 8003faa:	4691      	mov	r9, r2
 8003fac:	2f78      	cmp	r7, #120	; 0x78
 8003fae:	4680      	mov	r8, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	469a      	mov	sl, r3
 8003fb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d9 	beq.w	8004178 <_printf_i+0x1d4>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80a4 	beq.w	8004114 <_printf_i+0x170>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a101      	add	r1, pc, #4	; (adr r1, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	0800415f 	.word	0x0800415f
 8004014:	08004081 	.word	0x08004081
 8004018:	08004141 	.word	0x08004141
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	08004181 	.word	0x08004181
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004149 	.word	0x08004149
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e0a4      	b.n	800419a <_printf_i+0x1f6>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	6829      	ldr	r1, [r5, #0]
 8004054:	0606      	lsls	r6, r0, #24
 8004056:	f101 0304 	add.w	r3, r1, #4
 800405a:	d50a      	bpl.n	8004072 <_printf_i+0xce>
 800405c:	680e      	ldr	r6, [r1, #0]
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	2e00      	cmp	r6, #0
 8004062:	da03      	bge.n	800406c <_printf_i+0xc8>
 8004064:	232d      	movs	r3, #45	; 0x2d
 8004066:	4276      	negs	r6, r6
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406c:	230a      	movs	r3, #10
 800406e:	485e      	ldr	r0, [pc, #376]	; (80041e8 <_printf_i+0x244>)
 8004070:	e019      	b.n	80040a6 <_printf_i+0x102>
 8004072:	680e      	ldr	r6, [r1, #0]
 8004074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	bf18      	it	ne
 800407c:	b236      	sxthne	r6, r6
 800407e:	e7ef      	b.n	8004060 <_printf_i+0xbc>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	1d19      	adds	r1, r3, #4
 8004086:	6029      	str	r1, [r5, #0]
 8004088:	0601      	lsls	r1, r0, #24
 800408a:	d501      	bpl.n	8004090 <_printf_i+0xec>
 800408c:	681e      	ldr	r6, [r3, #0]
 800408e:	e002      	b.n	8004096 <_printf_i+0xf2>
 8004090:	0646      	lsls	r6, r0, #25
 8004092:	d5fb      	bpl.n	800408c <_printf_i+0xe8>
 8004094:	881e      	ldrh	r6, [r3, #0]
 8004096:	2f6f      	cmp	r7, #111	; 0x6f
 8004098:	bf0c      	ite	eq
 800409a:	2308      	moveq	r3, #8
 800409c:	230a      	movne	r3, #10
 800409e:	4852      	ldr	r0, [pc, #328]	; (80041e8 <_printf_i+0x244>)
 80040a0:	2100      	movs	r1, #0
 80040a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a6:	6865      	ldr	r5, [r4, #4]
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	bfa8      	it	ge
 80040ac:	6821      	ldrge	r1, [r4, #0]
 80040ae:	60a5      	str	r5, [r4, #8]
 80040b0:	bfa4      	itt	ge
 80040b2:	f021 0104 	bicge.w	r1, r1, #4
 80040b6:	6021      	strge	r1, [r4, #0]
 80040b8:	b90e      	cbnz	r6, 80040be <_printf_i+0x11a>
 80040ba:	2d00      	cmp	r5, #0
 80040bc:	d04d      	beq.n	800415a <_printf_i+0x1b6>
 80040be:	4615      	mov	r5, r2
 80040c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c4:	fb03 6711 	mls	r7, r3, r1, r6
 80040c8:	5dc7      	ldrb	r7, [r0, r7]
 80040ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ce:	4637      	mov	r7, r6
 80040d0:	42bb      	cmp	r3, r7
 80040d2:	460e      	mov	r6, r1
 80040d4:	d9f4      	bls.n	80040c0 <_printf_i+0x11c>
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d10b      	bne.n	80040f2 <_printf_i+0x14e>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	07de      	lsls	r6, r3, #31
 80040de:	d508      	bpl.n	80040f2 <_printf_i+0x14e>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	6861      	ldr	r1, [r4, #4]
 80040e4:	4299      	cmp	r1, r3
 80040e6:	bfde      	ittt	le
 80040e8:	2330      	movle	r3, #48	; 0x30
 80040ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040f2:	1b52      	subs	r2, r2, r5
 80040f4:	6122      	str	r2, [r4, #16]
 80040f6:	464b      	mov	r3, r9
 80040f8:	4621      	mov	r1, r4
 80040fa:	4640      	mov	r0, r8
 80040fc:	f8cd a000 	str.w	sl, [sp]
 8004100:	aa03      	add	r2, sp, #12
 8004102:	f7ff fedf 	bl	8003ec4 <_printf_common>
 8004106:	3001      	adds	r0, #1
 8004108:	d14c      	bne.n	80041a4 <_printf_i+0x200>
 800410a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800410e:	b004      	add	sp, #16
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004114:	4834      	ldr	r0, [pc, #208]	; (80041e8 <_printf_i+0x244>)
 8004116:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800411a:	6829      	ldr	r1, [r5, #0]
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004122:	6029      	str	r1, [r5, #0]
 8004124:	061d      	lsls	r5, r3, #24
 8004126:	d514      	bpl.n	8004152 <_printf_i+0x1ae>
 8004128:	07df      	lsls	r7, r3, #31
 800412a:	bf44      	itt	mi
 800412c:	f043 0320 	orrmi.w	r3, r3, #32
 8004130:	6023      	strmi	r3, [r4, #0]
 8004132:	b91e      	cbnz	r6, 800413c <_printf_i+0x198>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	2310      	movs	r3, #16
 800413e:	e7af      	b.n	80040a0 <_printf_i+0xfc>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	f043 0320 	orr.w	r3, r3, #32
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	2378      	movs	r3, #120	; 0x78
 800414a:	4828      	ldr	r0, [pc, #160]	; (80041ec <_printf_i+0x248>)
 800414c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004150:	e7e3      	b.n	800411a <_printf_i+0x176>
 8004152:	0659      	lsls	r1, r3, #25
 8004154:	bf48      	it	mi
 8004156:	b2b6      	uxthmi	r6, r6
 8004158:	e7e6      	b.n	8004128 <_printf_i+0x184>
 800415a:	4615      	mov	r5, r2
 800415c:	e7bb      	b.n	80040d6 <_printf_i+0x132>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	6826      	ldr	r6, [r4, #0]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	6961      	ldr	r1, [r4, #20]
 8004166:	6028      	str	r0, [r5, #0]
 8004168:	0635      	lsls	r5, r6, #24
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	d501      	bpl.n	8004172 <_printf_i+0x1ce>
 800416e:	6019      	str	r1, [r3, #0]
 8004170:	e002      	b.n	8004178 <_printf_i+0x1d4>
 8004172:	0670      	lsls	r0, r6, #25
 8004174:	d5fb      	bpl.n	800416e <_printf_i+0x1ca>
 8004176:	8019      	strh	r1, [r3, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	4615      	mov	r5, r2
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	e7ba      	b.n	80040f6 <_printf_i+0x152>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	681d      	ldr	r5, [r3, #0]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	4628      	mov	r0, r5
 800418e:	f000 f82f 	bl	80041f0 <memchr>
 8004192:	b108      	cbz	r0, 8004198 <_printf_i+0x1f4>
 8004194:	1b40      	subs	r0, r0, r5
 8004196:	6060      	str	r0, [r4, #4]
 8004198:	6863      	ldr	r3, [r4, #4]
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a2:	e7a8      	b.n	80040f6 <_printf_i+0x152>
 80041a4:	462a      	mov	r2, r5
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	47d0      	blx	sl
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0ab      	beq.n	800410a <_printf_i+0x166>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	079b      	lsls	r3, r3, #30
 80041b6:	d413      	bmi.n	80041e0 <_printf_i+0x23c>
 80041b8:	68e0      	ldr	r0, [r4, #12]
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	4298      	cmp	r0, r3
 80041be:	bfb8      	it	lt
 80041c0:	4618      	movlt	r0, r3
 80041c2:	e7a4      	b.n	800410e <_printf_i+0x16a>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4632      	mov	r2, r6
 80041c8:	4649      	mov	r1, r9
 80041ca:	4640      	mov	r0, r8
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d09b      	beq.n	800410a <_printf_i+0x166>
 80041d2:	3501      	adds	r5, #1
 80041d4:	68e3      	ldr	r3, [r4, #12]
 80041d6:	9903      	ldr	r1, [sp, #12]
 80041d8:	1a5b      	subs	r3, r3, r1
 80041da:	42ab      	cmp	r3, r5
 80041dc:	dcf2      	bgt.n	80041c4 <_printf_i+0x220>
 80041de:	e7eb      	b.n	80041b8 <_printf_i+0x214>
 80041e0:	2500      	movs	r5, #0
 80041e2:	f104 0619 	add.w	r6, r4, #25
 80041e6:	e7f5      	b.n	80041d4 <_printf_i+0x230>
 80041e8:	080046a1 	.word	0x080046a1
 80041ec:	080046b2 	.word	0x080046b2

080041f0 <memchr>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	b2c9      	uxtb	r1, r1
 80041f6:	4402      	add	r2, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	d101      	bne.n	8004202 <memchr+0x12>
 80041fe:	2000      	movs	r0, #0
 8004200:	e003      	b.n	800420a <memchr+0x1a>
 8004202:	7804      	ldrb	r4, [r0, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	428c      	cmp	r4, r1
 8004208:	d1f6      	bne.n	80041f8 <memchr+0x8>
 800420a:	bd10      	pop	{r4, pc}

0800420c <memcpy>:
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004214:	d100      	bne.n	8004218 <memcpy+0xc>
 8004216:	4770      	bx	lr
 8004218:	b510      	push	{r4, lr}
 800421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800421e:	4291      	cmp	r1, r2
 8004220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004224:	d1f9      	bne.n	800421a <memcpy+0xe>
 8004226:	bd10      	pop	{r4, pc}

08004228 <memmove>:
 8004228:	4288      	cmp	r0, r1
 800422a:	b510      	push	{r4, lr}
 800422c:	eb01 0402 	add.w	r4, r1, r2
 8004230:	d902      	bls.n	8004238 <memmove+0x10>
 8004232:	4284      	cmp	r4, r0
 8004234:	4623      	mov	r3, r4
 8004236:	d807      	bhi.n	8004248 <memmove+0x20>
 8004238:	1e43      	subs	r3, r0, #1
 800423a:	42a1      	cmp	r1, r4
 800423c:	d008      	beq.n	8004250 <memmove+0x28>
 800423e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004246:	e7f8      	b.n	800423a <memmove+0x12>
 8004248:	4601      	mov	r1, r0
 800424a:	4402      	add	r2, r0
 800424c:	428a      	cmp	r2, r1
 800424e:	d100      	bne.n	8004252 <memmove+0x2a>
 8004250:	bd10      	pop	{r4, pc}
 8004252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800425a:	e7f7      	b.n	800424c <memmove+0x24>

0800425c <_free_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4605      	mov	r5, r0
 8004260:	2900      	cmp	r1, #0
 8004262:	d040      	beq.n	80042e6 <_free_r+0x8a>
 8004264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004268:	1f0c      	subs	r4, r1, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	18e4      	addlt	r4, r4, r3
 8004270:	f000 f910 	bl	8004494 <__malloc_lock>
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <_free_r+0x8c>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	b933      	cbnz	r3, 8004288 <_free_r+0x2c>
 800427a:	6063      	str	r3, [r4, #4]
 800427c:	6014      	str	r4, [r2, #0]
 800427e:	4628      	mov	r0, r5
 8004280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004284:	f000 b90c 	b.w	80044a0 <__malloc_unlock>
 8004288:	42a3      	cmp	r3, r4
 800428a:	d908      	bls.n	800429e <_free_r+0x42>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	1821      	adds	r1, r4, r0
 8004290:	428b      	cmp	r3, r1
 8004292:	bf01      	itttt	eq
 8004294:	6819      	ldreq	r1, [r3, #0]
 8004296:	685b      	ldreq	r3, [r3, #4]
 8004298:	1809      	addeq	r1, r1, r0
 800429a:	6021      	streq	r1, [r4, #0]
 800429c:	e7ed      	b.n	800427a <_free_r+0x1e>
 800429e:	461a      	mov	r2, r3
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b10b      	cbz	r3, 80042a8 <_free_r+0x4c>
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	d9fa      	bls.n	800429e <_free_r+0x42>
 80042a8:	6811      	ldr	r1, [r2, #0]
 80042aa:	1850      	adds	r0, r2, r1
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	d10b      	bne.n	80042c8 <_free_r+0x6c>
 80042b0:	6820      	ldr	r0, [r4, #0]
 80042b2:	4401      	add	r1, r0
 80042b4:	1850      	adds	r0, r2, r1
 80042b6:	4283      	cmp	r3, r0
 80042b8:	6011      	str	r1, [r2, #0]
 80042ba:	d1e0      	bne.n	800427e <_free_r+0x22>
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4401      	add	r1, r0
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	6053      	str	r3, [r2, #4]
 80042c6:	e7da      	b.n	800427e <_free_r+0x22>
 80042c8:	d902      	bls.n	80042d0 <_free_r+0x74>
 80042ca:	230c      	movs	r3, #12
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	e7d6      	b.n	800427e <_free_r+0x22>
 80042d0:	6820      	ldr	r0, [r4, #0]
 80042d2:	1821      	adds	r1, r4, r0
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf01      	itttt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	1809      	addeq	r1, r1, r0
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6054      	str	r4, [r2, #4]
 80042e4:	e7cb      	b.n	800427e <_free_r+0x22>
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	200001e8 	.word	0x200001e8

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0e      	ldr	r6, [pc, #56]	; (8004328 <sbrk_aligned+0x3c>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f000 f8bc 	bl	8004474 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 f8b7 	bl	8004474 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d00a      	beq.n	8004320 <sbrk_aligned+0x34>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d007      	beq.n	8004324 <sbrk_aligned+0x38>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f8ac 	bl	8004474 <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d101      	bne.n	8004324 <sbrk_aligned+0x38>
 8004320:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004324:	4620      	mov	r0, r4
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	200001ec 	.word	0x200001ec

0800432c <_malloc_r>:
 800432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004330:	1ccd      	adds	r5, r1, #3
 8004332:	f025 0503 	bic.w	r5, r5, #3
 8004336:	3508      	adds	r5, #8
 8004338:	2d0c      	cmp	r5, #12
 800433a:	bf38      	it	cc
 800433c:	250c      	movcc	r5, #12
 800433e:	2d00      	cmp	r5, #0
 8004340:	4607      	mov	r7, r0
 8004342:	db01      	blt.n	8004348 <_malloc_r+0x1c>
 8004344:	42a9      	cmp	r1, r5
 8004346:	d905      	bls.n	8004354 <_malloc_r+0x28>
 8004348:	230c      	movs	r3, #12
 800434a:	2600      	movs	r6, #0
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4630      	mov	r0, r6
 8004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004354:	4e2e      	ldr	r6, [pc, #184]	; (8004410 <_malloc_r+0xe4>)
 8004356:	f000 f89d 	bl	8004494 <__malloc_lock>
 800435a:	6833      	ldr	r3, [r6, #0]
 800435c:	461c      	mov	r4, r3
 800435e:	bb34      	cbnz	r4, 80043ae <_malloc_r+0x82>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	f7ff ffc2 	bl	80042ec <sbrk_aligned>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	4604      	mov	r4, r0
 800436c:	d14d      	bne.n	800440a <_malloc_r+0xde>
 800436e:	6834      	ldr	r4, [r6, #0]
 8004370:	4626      	mov	r6, r4
 8004372:	2e00      	cmp	r6, #0
 8004374:	d140      	bne.n	80043f8 <_malloc_r+0xcc>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	4631      	mov	r1, r6
 800437a:	4638      	mov	r0, r7
 800437c:	eb04 0803 	add.w	r8, r4, r3
 8004380:	f000 f878 	bl	8004474 <_sbrk_r>
 8004384:	4580      	cmp	r8, r0
 8004386:	d13a      	bne.n	80043fe <_malloc_r+0xd2>
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	3503      	adds	r5, #3
 800438c:	1a6d      	subs	r5, r5, r1
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	4638      	mov	r0, r7
 800439c:	4629      	mov	r1, r5
 800439e:	f7ff ffa5 	bl	80042ec <sbrk_aligned>
 80043a2:	3001      	adds	r0, #1
 80043a4:	d02b      	beq.n	80043fe <_malloc_r+0xd2>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	442b      	add	r3, r5
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e00e      	b.n	80043cc <_malloc_r+0xa0>
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	1b52      	subs	r2, r2, r5
 80043b2:	d41e      	bmi.n	80043f2 <_malloc_r+0xc6>
 80043b4:	2a0b      	cmp	r2, #11
 80043b6:	d916      	bls.n	80043e6 <_malloc_r+0xba>
 80043b8:	1961      	adds	r1, r4, r5
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	6025      	str	r5, [r4, #0]
 80043be:	bf18      	it	ne
 80043c0:	6059      	strne	r1, [r3, #4]
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	bf08      	it	eq
 80043c6:	6031      	streq	r1, [r6, #0]
 80043c8:	5162      	str	r2, [r4, r5]
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	4638      	mov	r0, r7
 80043ce:	f104 060b 	add.w	r6, r4, #11
 80043d2:	f000 f865 	bl	80044a0 <__malloc_unlock>
 80043d6:	f026 0607 	bic.w	r6, r6, #7
 80043da:	1d23      	adds	r3, r4, #4
 80043dc:	1af2      	subs	r2, r6, r3
 80043de:	d0b6      	beq.n	800434e <_malloc_r+0x22>
 80043e0:	1b9b      	subs	r3, r3, r6
 80043e2:	50a3      	str	r3, [r4, r2]
 80043e4:	e7b3      	b.n	800434e <_malloc_r+0x22>
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	bf0c      	ite	eq
 80043ec:	6032      	streq	r2, [r6, #0]
 80043ee:	605a      	strne	r2, [r3, #4]
 80043f0:	e7ec      	b.n	80043cc <_malloc_r+0xa0>
 80043f2:	4623      	mov	r3, r4
 80043f4:	6864      	ldr	r4, [r4, #4]
 80043f6:	e7b2      	b.n	800435e <_malloc_r+0x32>
 80043f8:	4634      	mov	r4, r6
 80043fa:	6876      	ldr	r6, [r6, #4]
 80043fc:	e7b9      	b.n	8004372 <_malloc_r+0x46>
 80043fe:	230c      	movs	r3, #12
 8004400:	4638      	mov	r0, r7
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	f000 f84c 	bl	80044a0 <__malloc_unlock>
 8004408:	e7a1      	b.n	800434e <_malloc_r+0x22>
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	e7de      	b.n	80043cc <_malloc_r+0xa0>
 800440e:	bf00      	nop
 8004410:	200001e8 	.word	0x200001e8

08004414 <_realloc_r>:
 8004414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004418:	4680      	mov	r8, r0
 800441a:	4614      	mov	r4, r2
 800441c:	460e      	mov	r6, r1
 800441e:	b921      	cbnz	r1, 800442a <_realloc_r+0x16>
 8004420:	4611      	mov	r1, r2
 8004422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004426:	f7ff bf81 	b.w	800432c <_malloc_r>
 800442a:	b92a      	cbnz	r2, 8004438 <_realloc_r+0x24>
 800442c:	f7ff ff16 	bl	800425c <_free_r>
 8004430:	4625      	mov	r5, r4
 8004432:	4628      	mov	r0, r5
 8004434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004438:	f000 f838 	bl	80044ac <_malloc_usable_size_r>
 800443c:	4284      	cmp	r4, r0
 800443e:	4607      	mov	r7, r0
 8004440:	d802      	bhi.n	8004448 <_realloc_r+0x34>
 8004442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004446:	d812      	bhi.n	800446e <_realloc_r+0x5a>
 8004448:	4621      	mov	r1, r4
 800444a:	4640      	mov	r0, r8
 800444c:	f7ff ff6e 	bl	800432c <_malloc_r>
 8004450:	4605      	mov	r5, r0
 8004452:	2800      	cmp	r0, #0
 8004454:	d0ed      	beq.n	8004432 <_realloc_r+0x1e>
 8004456:	42bc      	cmp	r4, r7
 8004458:	4622      	mov	r2, r4
 800445a:	4631      	mov	r1, r6
 800445c:	bf28      	it	cs
 800445e:	463a      	movcs	r2, r7
 8004460:	f7ff fed4 	bl	800420c <memcpy>
 8004464:	4631      	mov	r1, r6
 8004466:	4640      	mov	r0, r8
 8004468:	f7ff fef8 	bl	800425c <_free_r>
 800446c:	e7e1      	b.n	8004432 <_realloc_r+0x1e>
 800446e:	4635      	mov	r5, r6
 8004470:	e7df      	b.n	8004432 <_realloc_r+0x1e>
	...

08004474 <_sbrk_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	2300      	movs	r3, #0
 8004478:	4d05      	ldr	r5, [pc, #20]	; (8004490 <_sbrk_r+0x1c>)
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc f9b4 	bl	80007ec <_sbrk>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_sbrk_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_sbrk_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200001f0 	.word	0x200001f0

08004494 <__malloc_lock>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__malloc_lock+0x8>)
 8004496:	f000 b811 	b.w	80044bc <__retarget_lock_acquire_recursive>
 800449a:	bf00      	nop
 800449c:	200001f4 	.word	0x200001f4

080044a0 <__malloc_unlock>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__malloc_unlock+0x8>)
 80044a2:	f000 b80c 	b.w	80044be <__retarget_lock_release_recursive>
 80044a6:	bf00      	nop
 80044a8:	200001f4 	.word	0x200001f4

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <__retarget_lock_acquire_recursive>:
 80044bc:	4770      	bx	lr

080044be <__retarget_lock_release_recursive>:
 80044be:	4770      	bx	lr

080044c0 <_init>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr

080044cc <_fini>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr
